<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BMWJJ.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BMWJJ.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 16 20:36:43 2020
<BR><P>
<H3>Maximum Stack Usage =       1136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MessageProc &rArr; ReadCard &rArr; BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[15c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[432]">phhalHw_Rc523_SetConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[433]">phhalHw_SetConfig</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel1_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel2_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel3_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel4_5_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from keypad.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">IdentifyProc</a> from identifyproc.o(i.IdentifyProc) referenced from main.o(i.app_main)
 <LI><a href="#[86]">KeyProc</a> from keyproc.o(i.KeyProc) referenced from main.o(i.app_main)
 <LI><a href="#[87]">MC0_SPI_SignalEvent</a> from fs_config.o(i.MC0_SPI_SignalEvent) referenced from fs_config.o(i.fs_config)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[84]">MessageProc</a> from messageproc.o(i.MessageProc) referenced from main.o(i.app_main)
 <LI><a href="#[b]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">ReadCardThread</a> from addcard.o(i.ReadCardThread) referenced from addcard.o(i.StartAddCard)
 <LI><a href="#[80]">ReadFPThread</a> from addfp.o(i.ReadFPThread) referenced from addfp.o(i.StartAddFP)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[92]">SPI1_Control</a> from spi_stm32f10x.o(i.SPI1_Control) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[91]">SPI1_GetDataCount</a> from spi_stm32f10x.o(i.SPI1_GetDataCount) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[93]">SPI1_GetStatus</a> from spi_stm32f10x.o(i.SPI1_GetStatus) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from spi_stm32f10x.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">SPI1_Initialize</a> from spi_stm32f10x.o(i.SPI1_Initialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[8d]">SPI1_PowerControl</a> from spi_stm32f10x.o(i.SPI1_PowerControl) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[8f]">SPI1_Receive</a> from spi_stm32f10x.o(i.SPI1_Receive) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[8e]">SPI1_Send</a> from spi_stm32f10x.o(i.SPI1_Send) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[90]">SPI1_Transfer</a> from spi_stm32f10x.o(i.SPI1_Transfer) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[8c]">SPI1_Uninitialize</a> from spi_stm32f10x.o(i.SPI1_Uninitialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">SPIX_GetCapabilities</a> from spi_stm32f10x.o(i.SPIX_GetCapabilities) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[89]">SPIX_GetVersion</a> from spi_stm32f10x.o(i.SPIX_GetVersion) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[10]">SVC_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from irq_cm3.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[13]">SysTick_Handler</a> from irq_cm3.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ac]">USBD0_SignalDeviceEvent</a> from usbd_config_0.o(i.USBD0_SignalDeviceEvent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[ad]">USBD0_SignalEndpointEvent</a> from usbd_config_0.o(i.USBD0_SignalEndpointEvent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[81]">USBD_Core_Thread</a> from usbd_lib_core.o(i.USBD_Core_Thread) referenced from usbd_config_0.o(i.USBD_ThreadCreate)
 <LI><a href="#[bb]">USBD_Device0_ConfigurationChanged</a> from usbd_config_0.o(i.USBD_Device0_ConfigurationChanged) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bd]">USBD_Device0_DisableRemoteWakeup</a> from usbd_config_0.o(i.USBD_Device0_DisableRemoteWakeup) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bc]">USBD_Device0_EnableRemoteWakeup</a> from usbd_config_0.o(i.USBD_Device0_EnableRemoteWakeup) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c1]">USBD_Device0_Endpoint0_InDataSent</a> from usbd_config_0.o(i.USBD_Device0_Endpoint0_InDataSent) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[c0]">USBD_Device0_Endpoint0_OutDataReceived</a> from usbd_config_0.o(i.USBD_Device0_Endpoint0_OutDataReceived) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[bf]">USBD_Device0_Endpoint0_SetupPacketProcessed</a> from usbd_config_0.o(i.USBD_Device0_Endpoint0_SetupPacketProcessed) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[be]">USBD_Device0_Endpoint0_SetupPacketReceived</a> from usbd_config_0.o(i.USBD_Device0_Endpoint0_SetupPacketReceived) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b8]">USBD_Device0_HighSpeedActivated</a> from usbd_config_0.o(i.USBD_Device0_HighSpeedActivated) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b4]">USBD_Device0_Initialize</a> from usbd_config_0.o(i.USBD_Device0_Initialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b7]">USBD_Device0_Reset</a> from usbd_config_0.o(i.USBD_Device0_Reset) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[ba]">USBD_Device0_Resumed</a> from usbd_config_0.o(i.USBD_Device0_Resumed) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b9]">USBD_Device0_Suspended</a> from usbd_config_0.o(i.USBD_Device0_Suspended) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b5]">USBD_Device0_Uninitialize</a> from usbd_config_0.o(i.USBD_Device0_Uninitialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b6]">USBD_Device0_VbusChanged</a> from usbd_config_0.o(i.USBD_Device0_VbusChanged) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[99]">USBD_DeviceConnect</a> from usbd_stm32f10x.o(i.USBD_DeviceConnect) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9a]">USBD_DeviceDisconnect</a> from usbd_stm32f10x.o(i.USBD_DeviceDisconnect) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9b]">USBD_DeviceGetState</a> from usbd_stm32f10x.o(i.USBD_DeviceGetState) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9c]">USBD_DeviceRemoteWakeup</a> from usbd_stm32f10x.o(i.USBD_DeviceRemoteWakeup) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9d]">USBD_DeviceSetAddress</a> from usbd_stm32f10x.o(i.USBD_DeviceSetAddress) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9f]">USBD_EndpointConfigure</a> from usbd_stm32f10x.o(i.USBD_EndpointConfigure) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a1]">USBD_EndpointStall</a> from usbd_stm32f10x.o(i.USBD_EndpointStall) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a2]">USBD_EndpointTransfer</a> from usbd_stm32f10x.o(i.USBD_EndpointTransfer) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a4]">USBD_EndpointTransferAbort</a> from usbd_stm32f10x.o(i.USBD_EndpointTransferAbort) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a3]">USBD_EndpointTransferGetResult</a> from usbd_stm32f10x.o(i.USBD_EndpointTransferGetResult) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a0]">USBD_EndpointUnconfigure</a> from usbd_stm32f10x.o(i.USBD_EndpointUnconfigure) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[95]">USBD_GetCapabilities</a> from usbd_stm32f10x.o(i.USBD_GetCapabilities) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[a5]">USBD_GetFrameNumber</a> from usbd_stm32f10x.o(i.USBD_GetFrameNumber) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[94]">USBD_GetVersion</a> from usbd_stm32f10x.o(i.USBD_GetVersion) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[b2]">USBD_HID0_GetProtocol</a> from usbd_config_0.o(i.USBD_HID0_GetProtocol) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b0]">USBD_HID0_GetReport</a> from user_hid_0.o(i.USBD_HID0_GetReport) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[ae]">USBD_HID0_Initialize</a> from usbd_config_0.o(i.USBD_HID0_Initialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b3]">USBD_HID0_SetProtocol</a> from usbd_config_0.o(i.USBD_HID0_SetProtocol) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[b1]">USBD_HID0_SetReport</a> from user_hid_0.o(i.USBD_HID0_SetReport) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[af]">USBD_HID0_Uninitialize</a> from usbd_config_0.o(i.USBD_HID0_Uninitialize) referenced from usbd_config_0.o(.constdata)
 <LI><a href="#[82]">USBD_HID_Thread</a> from usbd_lib_hid.o(i.USBD_HID_Thread) referenced from usbd_config_0.o(i.USBD_ThreadCreate)
 <LI><a href="#[83]">USBD_HID_Timer</a> from usbd_lib_hid.o(i.USBD_HID_Timer) referenced from usbd_config_0.o(i.USBD_TimerCreate)
 <LI><a href="#[96]">USBD_Initialize</a> from usbd_stm32f10x.o(i.USBD_Initialize) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[98]">USBD_PowerControl</a> from usbd_stm32f10x.o(i.USBD_PowerControl) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[9e]">USBD_ReadSetupPacket</a> from usbd_stm32f10x.o(i.USBD_ReadSetupPacket) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[97]">USBD_Uninitialize</a> from usbd_stm32f10x.o(i.USBD_Uninitialize) referenced from usbd_stm32f10x.o(.constdata)
 <LI><a href="#[3e]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">USB_LP_CAN1_RX0_IRQHandler</a> from usbd_stm32f10x.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c2]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[52]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[56]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[55]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[57]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[54]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[53]">_sputc</a> from _sputc.o(.text) referenced 2 times from vsprintf.o(.text)
 <LI><a href="#[88]">app_main</a> from main.o(i.app_main) referenced from main.o(i.main)
 <LI><a href="#[58]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ab]">mc0_DevCtrl</a> from fs_config.o(i.mc0_DevCtrl) referenced from fs_config.o(.constdata)
 <LI><a href="#[a6]">mc0_Init</a> from fs_config.o(i.mc0_Init) referenced from fs_config.o(.constdata)
 <LI><a href="#[aa]">mc0_RdInfo</a> from fs_config.o(i.mc0_RdInfo) referenced from fs_config.o(.constdata)
 <LI><a href="#[a8]">mc0_RdSect</a> from fs_config.o(i.mc0_RdSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[a7]">mc0_UnInit</a> from fs_config.o(i.mc0_UnInit) referenced from fs_config.o(.constdata)
 <LI><a href="#[a9]">mc0_WrSect</a> from fs_config.o(i.mc0_WrSect) referenced from fs_config.o(.constdata)
 <LI><a href="#[68]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[7a]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[7b]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[7c]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[7e]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[69]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[6a]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[7d]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[59]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[5a]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[5b]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(.text.osKernelGetSysTimerCount)
 <LI><a href="#[5c]">svcRtxKernelGetSysTimerFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) referenced from rtx_kernel.o(.text.osKernelGetSysTimerFreq)
 <LI><a href="#[5d]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[5e]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[5f]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[60]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[61]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[62]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[63]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[64]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[65]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[66]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[67]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[6b]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[6c]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[6d]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[6e]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[6f]">svcRtxThreadDetach</a> from rtx_thread.o(.text.svcRtxThreadDetach) referenced from rtx_thread.o(.text.osThreadDetach)
 <LI><a href="#[70]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[71]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[72]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[73]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[74]">svcRtxThreadJoin</a> from rtx_thread.o(.text.svcRtxThreadJoin) referenced from rtx_thread.o(.text.osThreadJoin)
 <LI><a href="#[75]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[76]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[77]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[78]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[79]">svcRtxTimerStop</a> from rtx_timer.o(.text.svcRtxTimerStop) referenced from rtx_timer.o(.text.osTimerStop)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c2]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[47b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[47c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[47d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[47e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[47f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ca]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[117]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cc]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[ce]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d0]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d1]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[480]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d4]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d6]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[da]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[dc]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[de]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[e2]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[481]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e4]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e6]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e8]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ea]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[482]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fe]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[483]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[484]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[485]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[486]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[487]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[488]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[489]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[48a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[48b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[48c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[48d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[48e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[48f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[490]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[491]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[492]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[493]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[494]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[495]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[496]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[497]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[498]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[499]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_heap_2 &rArr; _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[49a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[49b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[49c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[49d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[49e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[49f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[fd]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[163]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[102]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4a1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[104]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26b]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[246]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_inc32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[245]"></a>__asm___15_EventRecorder_c_e8d3082c__atomic_xch32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[24d]"></a>__asm___15_EventRecorder_c_e8d3082c__LockRecord</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[24e]"></a>__asm___15_EventRecorder_c_e8d3082c__UnlockRecord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eventrecorder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a2]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc2.o(.emb_text), UNUSED)

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringToBytes
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_GetDriveInfo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[4a3]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_GetDriveInfo
</UL>

<P><STRONG><a name="[109]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[10b]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>

<P><STRONG><a name="[10d]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeToString
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetUserCount
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAdmin
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateAdminInfo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponseV
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_StrError
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[10f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[110]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[10e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d5]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[114]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[db]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e3]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[cd]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[115]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[118]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToTime
</UL>

<P><STRONG><a name="[11a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[4a4]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[121]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_AppendBinary
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[122]"></a>feof</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, feof_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = feof &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextLogEntry
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextGeoLoc
</UL>

<P><STRONG><a name="[123]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[125]"></a>$Super$$fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[128]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[129]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
</UL>

<P><STRONG><a name="[409]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_GetAts
</UL>

<P><STRONG><a name="[214]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateUnlockPassword
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateAdminPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UnsetSenderAndReceiver
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetSenderID
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetReceiverID
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetDeviceInfo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogEntryCount
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogDataStream
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeoLocDataStream
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteLogData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteGeoLocData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAllUsers
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAdmin
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateAdminInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
</UL>

<P><STRONG><a name="[12b]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[2fa]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponseV
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Write
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID0_SetReport
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Read
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectF
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectB
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionB
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_GetAts
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAtrInf
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_ReqC
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_SetKey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKey
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[12d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4a5]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Flush
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_FormatKeyEntry
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[12f]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4a9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointUnconfigure
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointConfigure
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[4aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1fe]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_IsUnlockPassword
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_IsAdminPassword
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4ac]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[132]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[12a]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[136]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[11f]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[12c]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tolower &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[111]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[112]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[113]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cb]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[4ad]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[10c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[53]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e5]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e7]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[141]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[dd]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[143]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d9]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[e1]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[11b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[119]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[54]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[4ae]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[149]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[11d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[14c]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[4af]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[135]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4b0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[14e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ed]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[150]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[58]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[13f]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[152]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[e9]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[eb]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[144]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[138]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[153]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[157]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[155]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[15f]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[4b2]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[162]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[4b3]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[4b4]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[f6]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[142]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[fa]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[4b5]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[15b]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15e]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextLogEntry
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextGeoLoc
</UL>

<P><STRONG><a name="[161]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_AppendBinary
</UL>

<P><STRONG><a name="[156]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[101]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15a]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[4b7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4b8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>_terminate_alloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, term_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _terminate_alloc &rArr; __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_heap_2
</UL>

<P><STRONG><a name="[165]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[164]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[166]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[105]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[167]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, h1_final_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_Finalize &rArr; _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[168]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[169]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[18c]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[197]"></a>OS_Tick_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[16c]"></a>OS_Tick_GetClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[191]"></a>OS_Tick_GetCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[196]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[193]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[192]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[195]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1d7]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_ShortAlternate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_LongAlternate
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Flush
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeviceRemoteWakeup
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
</UL>

<P><STRONG><a name="[3fb]"></a>osKernelGetState</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[16a]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>

<P><STRONG><a name="[16b]"></a>osKernelGetSysTimerFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetSysTimerFreq))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
</UL>

<P><STRONG><a name="[23c]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOn
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>

<P><STRONG><a name="[31c]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
</UL>

<P><STRONG><a name="[16d]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[3d6]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>osMessageQueueGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[18d]"></a>osMessageQueueNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[172]"></a>osMessageQueuePut</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[1d6]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
</UL>

<P><STRONG><a name="[37f]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[1d0]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>

<P><STRONG><a name="[1d3]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
</UL>

<P><STRONG><a name="[16e]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[198]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[183]"></a>osRtxMemoryFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[7a]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[173]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[175]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[194]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[17a]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[106]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[171]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[17d]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[17b]"></a>osRtxThreadDispatch</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[176]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[185]"></a>osRtxThreadListPut</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[17e]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[184]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[17f]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[178]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[187]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[188]"></a>osRtxThreadStartup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[181]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[189]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadJoin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[177]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[107]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[69]"></a>osRtxTimerThread</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[35a]"></a>osSemaphoreAcquire</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
</UL>

<P><STRONG><a name="[35c]"></a>osSemaphoreDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
</UL>

<P><STRONG><a name="[35b]"></a>osSemaphoreNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
</UL>

<P><STRONG><a name="[18f]"></a>osSemaphoreRelease</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
</UL>

<P><STRONG><a name="[2ec]"></a>osThreadDetach</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadDetach))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
</UL>

<P><STRONG><a name="[7d]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[190]"></a>osThreadFlagsSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>

<P><STRONG><a name="[2eb]"></a>osThreadFlagsWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
</UL>

<P><STRONG><a name="[37b]"></a>osThreadGetId</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[2fe]"></a>osThreadJoin</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadJoin))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
</UL>

<P><STRONG><a name="[2fd]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
</UL>

<P><STRONG><a name="[35e]"></a>osThreadTerminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
</UL>

<P><STRONG><a name="[35f]"></a>osTimerNew</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerCreate
</UL>

<P><STRONG><a name="[360]"></a>osTimerStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
</UL>

<P><STRONG><a name="[361]"></a>osTimerStop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStop))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
</UL>

<P><STRONG><a name="[139]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[19c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[19e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[19f]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[13a]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[13b]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1a0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1a3]"></a>Alert_OnReadCardOK</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, alertutil.o(i.Alert_OnReadCardOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Alert_OnReadCardOK &rArr; Buzzer_ShortAlternate &rArr; BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_ShortAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
</UL>

<P><STRONG><a name="[1a5]"></a>Alert_OnReadFingerOK</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, alertutil.o(i.Alert_OnReadFingerOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Alert_OnReadFingerOK &rArr; Buzzer_ShortAlternate &rArr; BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_ShortAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
</UL>

<P><STRONG><a name="[1a6]"></a>Alert_OnStartReadFinger</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, alertutil.o(i.Alert_OnStartReadFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Alert_OnStartReadFinger &rArr; Buzzer_LongAlternate &rArr; BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_LongAlternate
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
</UL>

<P><STRONG><a name="[1bb]"></a>BSP_BQ34Z100_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bq34z100.o(i.BSP_BQ34Z100_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_BQ34Z100_Init &rArr; I2C_S_Init &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1be]"></a>BSP_BQ34Z100_RemainingCapacityPercent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bq34z100.o(i.BSP_BQ34Z100_RemainingCapacityPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_BQ34Z100_RemainingCapacityPercent &rArr; BQ34Z100_Read &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ34Z100_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateStatusBar
</UL>

<P><STRONG><a name="[1bf]"></a>BSP_Buzzer_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, buzzer.o(i.BSP_Buzzer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_Buzzer_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Off
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1c1]"></a>BSP_Buzzer_Off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.BSP_Buzzer_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Buzzer_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_ShortAlternate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_LongAlternate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Init
</UL>

<P><STRONG><a name="[1c3]"></a>BSP_Buzzer_On</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer.o(i.BSP_Buzzer_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_ShortAlternate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_LongAlternate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1c5]"></a>BSP_FP_DeleteAllFPs</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fp_reader.o(i.BSP_FP_DeleteAllFPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_FP_DeleteAllFPs &rArr; FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
</UL>

<P><STRONG><a name="[1c8]"></a>BSP_FP_DeleteFP</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fp_reader.o(i.BSP_FP_DeleteFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_FP_DeleteFP &rArr; FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[1c9]"></a>BSP_FP_GetFingerStatus</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fp_reader.o(i.BSP_FP_GetFingerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_FP_GetFingerStatus &rArr; FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[1ca]"></a>BSP_FP_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fp_reader.o(i.BSP_FP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_FP_Init &rArr; MY_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_EnableDMA
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1d1]"></a>BSP_FP_Match</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fp_reader.o(i.BSP_FP_Match))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_FP_Match &rArr; FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[1d2]"></a>BSP_FP_RegisterFPStep</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fp_reader.o(i.BSP_FP_RegisterFPStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BSP_FP_RegisterFPStep &rArr; FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
</UL>

<P><STRONG><a name="[1cf]"></a>BSP_FP_Sleep</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fp_reader.o(i.BSP_FP_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_FP_Sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[1d4]"></a>BSP_FP_StrError</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, fp_reader.o(i.BSP_FP_StrError))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BSP_FP_StrError &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
</UL>

<P><STRONG><a name="[1d5]"></a>BSP_FP_WakeUp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fp_reader.o(i.BSP_FP_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_FP_WakeUp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[267]"></a>BSP_HID0_Available</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, user_hid_0.o(i.BSP_HID0_Available))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>

<P><STRONG><a name="[1d8]"></a>BSP_HID0_Flush</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, user_hid_0.o(i.BSP_HID0_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BSP_HID0_Flush &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushResponse
</UL>

<P><STRONG><a name="[1da]"></a>BSP_HID0_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_hid_0.o(i.BSP_HID0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = BSP_HID0_Init &rArr; USBD_Initialize &rArr; USBD_ClassInitialize &rArr; USBD_HID_Initialize &rArr; USBD_ThreadCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[268]"></a>BSP_HID0_Read</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, user_hid_0.o(i.BSP_HID0_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_HID0_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>

<P><STRONG><a name="[26a]"></a>BSP_HID0_Unread</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user_hid_0.o(i.BSP_HID0_Unread))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>

<P><STRONG><a name="[1dd]"></a>BSP_HID0_Write</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, user_hid_0.o(i.BSP_HID0_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponseV
</UL>

<P><STRONG><a name="[1de]"></a>BSP_Keypad_CloseBacklight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keypad.o(i.BSP_Keypad_CloseBacklight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Keypad_CloseBacklight
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOff
</UL>

<P><STRONG><a name="[1df]"></a>BSP_Keypad_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, keypad.o(i.BSP_Keypad_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_Keypad_Init &rArr; TTY6952_Setup &rArr; TTY6952_Write &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_OpenBacklight
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1e3]"></a>BSP_Keypad_OpenBacklight</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, keypad.o(i.BSP_Keypad_OpenBacklight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Keypad_OpenBacklight
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOn
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
</UL>

<P><STRONG><a name="[2b1]"></a>BSP_Keypad_ScanKey</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, keypad.o(i.BSP_Keypad_ScanKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_Keypad_ScanKey
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>

<P><STRONG><a name="[1e4]"></a>BSP_LCD_CommandV</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lcd_tjc4024.o(i.BSP_LCD_CommandV))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Transmit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_SenderUnlock
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPOk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPFail
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardOK
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardFail
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_06
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01_01
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_04
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03_01
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_04
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_02
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_01
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_04
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_03
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_02
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_01
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_02
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_01
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_02
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_01
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_01
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateUIDBox
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateStatusBar
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdatePasswordBox
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOn
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOff
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnUIDInputError
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnSetReceiverFailed
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnPasswordInputError
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnIdentifyFailed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadFPStep
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPOk
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPFail
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadCard
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardOK
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardFail
</UL>

<P><STRONG><a name="[1e6]"></a>BSP_LCD_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd_tjc4024.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_LCD_Init &rArr; MY_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1e7]"></a>BSP_LED_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[38a]"></a>BSP_LED_ToggleState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led.o(i.BSP_LED_ToggleState))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1e8]"></a>BSP_Motor_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, motor.o(i.BSP_Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_Motor_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1e9]"></a>BSP_Motor_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, motor.o(i.BSP_Motor_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Motor_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
</UL>

<P><STRONG><a name="[1ea]"></a>BSP_Motor_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(i.BSP_Motor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Motor_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
</UL>

<P><STRONG><a name="[1eb]"></a>BSP_RFID_GetCardNO</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rfid_reader.o(i.BSP_RFID_GetCardNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareReadSector
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareActive
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFDeactive
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccTest
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[1f3]"></a>BSP_RFID_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfid_reader.o(i.BSP_RFID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = BSP_RFID_Init &rArr; PICC_Init &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[2ea]"></a>BSP_RFID_StrError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfid_reader.o(i.BSP_RFID_StrError))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
</UL>

<P><STRONG><a name="[1f5]"></a>BSP_RTC_GetTime</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, rtc_pcf8563.o(i.BSP_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_RTC_GetTime &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateStatusBar
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
</UL>

<P><STRONG><a name="[1f6]"></a>BSP_RTC_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_pcf8563.o(i.BSP_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_RTC_Init &rArr; I2C_S_Init &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1f7]"></a>BSP_RTC_SetTime</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, rtc_pcf8563.o(i.BSP_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_RTC_SetTime &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
</UL>

<P><STRONG><a name="[1f8]"></a>BSP_Sensor_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sensor.o(i.BSP_Sensor_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_Sensor_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1fa]"></a>BSP_Sensor_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sensor.o(i.BSP_Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_Sensor_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[204]"></a>DMA1_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[205]"></a>DMA1_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[206]"></a>DMA1_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>DMA1_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[208]"></a>DMA1_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[209]"></a>DMA1_Channel6_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel6_Event))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>DMA1_Channel7_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel7_Event))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>DMA2_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>DMA2_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20d]"></a>DMA2_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_Event
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>DMA2_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>DMA2_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[2bd]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
</UL>

<P><STRONG><a name="[2b9]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_IsReceiveComplete
</UL>

<P><STRONG><a name="[3fc]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDMA_Init
</UL>

<P><STRONG><a name="[1a9]"></a>DbgPrint</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, dbgprint.o(i.DbgPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Flush
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_SenderUnlock
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPOk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPFail
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardOK
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardFail
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_06
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01_01
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_04
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03_01
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_04
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_02
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_01
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_04
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_03
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_02
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_01
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_02
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_01
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_02
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_01
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_01
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadFPStep
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPOk
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPFail
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadCard
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardOK
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardFail
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadState
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDescription
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>

<P><STRONG><a name="[1b0]"></a>DevMng_AddLog</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, devicemng.o(i.DevMng_AddLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_AppendBinary
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogEntryCount
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[218]"></a>DevMng_AddUpdateAdminInfo</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_AddUpdateAdminInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_AddUpdateAdminInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
</UL>

<P><STRONG><a name="[21a]"></a>DevMng_AddUpdateGeneralUserInfo</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_AddUpdateGeneralUserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_AddUpdateGeneralUserInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserMinorCardNO
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserMajorCardNO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserFP
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
</UL>

<P><STRONG><a name="[1ff]"></a>DevMng_DeleteAdmin</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_DeleteAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = DevMng_DeleteAdmin &rArr; FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
</UL>

<P><STRONG><a name="[1fc]"></a>DevMng_DeleteAllUsers</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_DeleteAllUsers))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DevMng_DeleteAllUsers &rArr; FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteDirectory
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
</UL>

<P><STRONG><a name="[201]"></a>DevMng_DeleteGeoLocData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_DeleteGeoLocData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DevMng_DeleteGeoLocData &rArr; FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
</UL>

<P><STRONG><a name="[203]"></a>DevMng_DeleteLogData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_DeleteLogData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DevMng_DeleteLogData &rArr; FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
</UL>

<P><STRONG><a name="[1ac]"></a>DevMng_GetAdminInfo</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetAdminInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
</UL>

<P><STRONG><a name="[21e]"></a>DevMng_GetAdminInfoByCardNO</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetAdminInfoByCardNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_GetAdminInfoByCardNO &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[220]"></a>DevMng_GetAdminInfoByFP</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetAdminInfoByFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_GetAdminInfoByFP &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_Find
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
</UL>

<P><STRONG><a name="[222]"></a>DevMng_GetDeviceInfo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_GetDeviceInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDescription
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[1ae]"></a>DevMng_GetGeneralUserInfo</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetGeneralUserInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[223]"></a>DevMng_GetGeoLocDataStream</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetGeoLocDataStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = DevMng_GetGeoLocDataStream &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[225]"></a>DevMng_GetLogDataStream</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetLogDataStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = DevMng_GetLogDataStream &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
</UL>

<P><STRONG><a name="[216]"></a>DevMng_GetLogEntryCount</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetLogEntryCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
</UL>

<P><STRONG><a name="[226]"></a>DevMng_GetNextGeoLoc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetNextGeoLoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DevMng_GetNextGeoLoc &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[227]"></a>DevMng_GetNextLogEntry</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_GetNextLogEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DevMng_GetNextLogEntry &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
</UL>

<P><STRONG><a name="[271]"></a>DevMng_GetReceiverID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, devicemng.o(i.DevMng_GetReceiverID))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
</UL>

<P><STRONG><a name="[228]"></a>DevMng_GetReceiverInfo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetReceiverInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = DevMng_GetReceiverInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[270]"></a>DevMng_GetSenderID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, devicemng.o(i.DevMng_GetSenderID))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
</UL>

<P><STRONG><a name="[229]"></a>DevMng_GetSenderInfo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, devicemng.o(i.DevMng_GetSenderInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[26f]"></a>DevMng_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devicemng.o(i.DevMng_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[22a]"></a>DevMng_GetUserCount</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_GetUserCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = DevMng_GetUserCount &rArr; ffind &rArr; fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[22b]"></a>DevMng_Init</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, devicemng.o(i.DevMng_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = DevMng_Init &rArr; DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[22c]"></a>DevMng_InvalidateUserFP</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_InvalidateUserFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = DevMng_InvalidateUserFP &rArr; DevMng_AddUpdateGeneralUserInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[22d]"></a>DevMng_InvalidateUserMajorCardNO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_InvalidateUserMajorCardNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = DevMng_InvalidateUserMajorCardNO &rArr; DevMng_AddUpdateGeneralUserInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[22e]"></a>DevMng_InvalidateUserMinorCardNO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_InvalidateUserMinorCardNO))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = DevMng_InvalidateUserMinorCardNO &rArr; DevMng_AddUpdateGeneralUserInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[22f]"></a>DevMng_IsAdminPassword</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_IsAdminPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevMng_IsAdminPassword
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[230]"></a>DevMng_IsUnlockPassword</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, devicemng.o(i.DevMng_IsUnlockPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevMng_IsUnlockPassword
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[231]"></a>DevMng_SetDeviceInfo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_SetDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_SetDeviceInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
</UL>

<P><STRONG><a name="[1af]"></a>DevMng_SetReceiverID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_SetReceiverID))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_SetReceiverID &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[1b5]"></a>DevMng_SetSenderID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_SetSenderID))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_SetSenderID &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
</UL>

<P><STRONG><a name="[1b3]"></a>DevMng_UnsetSenderAndReceiver</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_UnsetSenderAndReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DevMng_UnsetSenderAndReceiver &rArr; FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
</UL>

<P><STRONG><a name="[232]"></a>DevMng_UpdateAdminPassword</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_UpdateAdminPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_UpdateAdminPassword &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[233]"></a>DevMng_UpdateUnlockPassword</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, devicemng.o(i.DevMng_UpdateUnlockPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = DevMng_UpdateUnlockPassword &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[234]"></a>DiscLoopInit</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, rfcard_app_rc531.o(i.DiscLoopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DiscLoopInit &rArr; phacDiscLoop_SetConfig &rArr; phacDiscLoop_Sw_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[236]"></a>Disp_OnIdentifyFailed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.Disp_OnIdentifyFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_OnIdentifyFailed &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[237]"></a>Disp_OnPasswordInputError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, display.o(i.Disp_OnPasswordInputError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_OnPasswordInputError &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[238]"></a>Disp_OnSetReceiverFailed</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, display.o(i.Disp_OnSetReceiverFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_OnSetReceiverFailed &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[239]"></a>Disp_OnUIDInputError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, display.o(i.Disp_OnUIDInputError))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_OnUIDInputError &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[23a]"></a>Disp_TurnOff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.Disp_TurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_TurnOff &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_CloseBacklight
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[23b]"></a>Disp_TurnOn</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, display.o(i.Disp_TurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_TurnOn &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_OpenBacklight
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>

<P><STRONG><a name="[23d]"></a>Disp_UpdatePasswordBox</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display.o(i.Disp_UpdatePasswordBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_UpdatePasswordBox &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[23e]"></a>Disp_UpdateStatusBar</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, display.o(i.Disp_UpdateStatusBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Disp_UpdateStatusBar &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BQ34Z100_RemainingCapacityPercent
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[23f]"></a>Disp_UpdateUIDBox</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display.o(i.Disp_UpdateUIDBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Disp_UpdateUIDBox &rArr; BSP_LCD_CommandV &rArr; vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, keypad.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EXTI15_10_IRQHandler &rArr; TTY6952_Read &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[240]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
</UL>

<P><STRONG><a name="[247]"></a>EventRecord2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, eventrecorder.o(i.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_UnInit
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadInfo
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_update_sw_state
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_bus_speed
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
</UL>

<P><STRONG><a name="[24a]"></a>EventRecord4</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
</UL>

<P><STRONG><a name="[24c]"></a>EventRecordData</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, eventrecorder.o(i.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
</UL>

<P><STRONG><a name="[244]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[215]"></a>FileSys_AppendBinary</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, filesysutil.o(i.FileSys_AppendBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = FileSys_AppendBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
</UL>

<P><STRONG><a name="[21c]"></a>FileSys_DeleteDirectory</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesysutil.o(i.FileSys_DeleteDirectory))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = FileSys_DeleteDirectory &rArr; frmdir &rArr; fat_rmdir &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAllUsers
</UL>

<P><STRONG><a name="[21b]"></a>FileSys_DeleteFile</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, filesysutil.o(i.FileSys_DeleteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = FileSys_DeleteFile &rArr; fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UnsetSenderAndReceiver
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteLogData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteGeoLocData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAllUsers
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAdmin
</UL>

<P><STRONG><a name="[221]"></a>FileSys_Find</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, filesysutil.o(i.FileSys_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = FileSys_Find &rArr; ffind &rArr; fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
</UL>

<P><STRONG><a name="[25c]"></a>FileSys_GetDriveInfo</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, filesysutil.o(i.FileSys_GetDriveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FileSys_GetDriveInfo &rArr; ffree &rArr; fat_free &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[224]"></a>FileSys_OpenFile</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, filesysutil.o(i.FileSys_OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_WriteBinary
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_ReadBinary
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_AppendBinary
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogDataStream
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeoLocDataStream
</UL>

<P><STRONG><a name="[21d]"></a>FileSys_ReadBinary</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, filesysutil.o(i.FileSys_ReadBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogEntryCount
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
</UL>

<P><STRONG><a name="[259]"></a>FileSys_SetReady</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, filesysutil.o(i.FileSys_SetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FileSys_SetReady &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_StrError
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_Find
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteDirectory
</UL>

<P><STRONG><a name="[219]"></a>FileSys_StrError</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, filesysutil.o(i.FileSys_StrError))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateUnlockPassword
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateAdminPassword
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UnsetSenderAndReceiver
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetSenderID
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetReceiverID
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetDeviceInfo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogEntryCount
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogDataStream
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeoLocDataStream
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteLogData
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteGeoLocData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAllUsers
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAdmin
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateAdminInfo
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>

<P><STRONG><a name="[217]"></a>FileSys_WriteBinary</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, filesysutil.o(i.FileSys_WriteBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_OpenFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateUnlockPassword
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateAdminPassword
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetSenderID
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetReceiverID
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetDeviceInfo
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateAdminInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
</UL>

<P><STRONG><a name="[262]"></a>FlushResponse</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mputil.o(i.FlushResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FlushResponse &rArr; BSP_HID0_Flush &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2f7]"></a>GPIO_AFConfigure</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, gpio_stm32f10x.o(i.GPIO_AFConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>

<P><STRONG><a name="[1e0]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
</UL>

<P><STRONG><a name="[264]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gpio_stm32f10x.o(i.GPIO_GetPortClockState))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[1c0]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_Out
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_In
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GPIO_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Sensor_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Init
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGPIO_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[263]"></a>GPIO_PinConfigure</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gpio_stm32f10x.o(i.GPIO_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[265]"></a>GPIO_PortClock</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, gpio_stm32f10x.o(i.GPIO_PortClock))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>

<P><STRONG><a name="[1f9]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Sensor_GetStatus
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_CloseBacklight
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Off
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GPIO_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Start
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_WriteByte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>

<P><STRONG><a name="[1c4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_OpenBacklight
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_On
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Stop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Start
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_WriteByte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>

<P><STRONG><a name="[266]"></a>GetBytes</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mputil.o(i.GetBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetBytes &rArr; HexStringToBytes &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringToBytes
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Unread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Available
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
</UL>

<P><STRONG><a name="[26c]"></a>GetName</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mputil.o(i.GetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetName &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Unread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Available
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNamePart
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[1ab]"></a>GetNumber</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mputil.o(i.GetNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetNumber &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Unread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Available
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
</UL>

<P><STRONG><a name="[26e]"></a>GetStringValue</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mputil.o(i.GetStringValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetStringValue &rArr; BSP_HID0_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
</UL>

<P><STRONG><a name="[1b1]"></a>GoPage_01</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, display.o(i.GoPage_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GoPage_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOn
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetStatus
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderID
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverID
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[272]"></a>GoPage_01_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[273]"></a>GoPage_01_01_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[274]"></a>GoPage_01_01_02</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[275]"></a>GoPage_01_01_02_01</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[276]"></a>GoPage_01_01_02_01_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_01_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_01_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[277]"></a>GoPage_01_01_02_01_02</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_01_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_01_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[278]"></a>GoPage_01_01_02_02</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[279]"></a>GoPage_01_01_02_02_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_02_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_02_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27a]"></a>GoPage_01_01_02_02_02</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_02_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_02_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27b]"></a>GoPage_01_01_02_03</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_03 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27c]"></a>GoPage_01_01_02_03_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_03_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_03_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27d]"></a>GoPage_01_01_02_03_02</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_03_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_03_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27e]"></a>GoPage_01_01_02_03_03</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_03_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_03_03 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[27f]"></a>GoPage_01_01_02_03_04</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_01_02_03_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_03_04 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[280]"></a>GoPage_01_01_02_04</STRONG> (Thumb, 122 bytes, Stack size 176 bytes, display.o(i.GoPage_01_01_02_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_04 &rArr; DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[281]"></a>GoPage_01_01_02_05</STRONG> (Thumb, 96 bytes, Stack size 232 bytes, display.o(i.GoPage_01_01_02_05))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_05 &rArr; DevMng_GetLogDataStream &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeToString
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextLogEntry
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogDataStream
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[283]"></a>GoPage_01_01_02_06</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, display.o(i.GoPage_01_01_02_06))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = GoPage_01_01_02_06 &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_GetDriveInfo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetUserCount
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogEntryCount
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[288]"></a>GoPage_01_02</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_02 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[289]"></a>GoPage_01_02_01</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(i.GoPage_01_02_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = GoPage_01_02_01 &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[28b]"></a>GoPage_01_02_02</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(i.GoPage_01_02_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = GoPage_01_02_02 &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[28c]"></a>GoPage_01_02_04</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_02_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_02_04 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[28d]"></a>GoPage_01_03</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_03 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[28e]"></a>GoPage_01_03_01</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, display.o(i.GoPage_01_03_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = GoPage_01_03_01 &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
</UL>

<P><STRONG><a name="[28f]"></a>GoPage_01_04</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_04 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[290]"></a>GoPage_01_05</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, display.o(i.GoPage_01_05))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_05 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[291]"></a>GoPage_01_05_01</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_05_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_05_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[292]"></a>GoPage_01_05_01_01</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, display.o(i.GoPage_01_05_01_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_05_01_01 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[293]"></a>GoPage_01_06</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_01_06))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_01_06 &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[294]"></a>GoPage_AddCardFail</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_AddCardFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_AddCardFail &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
</UL>

<P><STRONG><a name="[295]"></a>GoPage_AddCardOK</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, display.o(i.GoPage_AddCardOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_AddCardOK &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
</UL>

<P><STRONG><a name="[296]"></a>GoPage_AddFPFail</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_AddFPFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_AddFPFail &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadError
</UL>

<P><STRONG><a name="[297]"></a>GoPage_AddFPOk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, display.o(i.GoPage_AddFPOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_AddFPOk &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
</UL>

<P><STRONG><a name="[298]"></a>GoPage_DeleteCardFail</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_DeleteCardFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_DeleteCardFail &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[299]"></a>GoPage_DeleteCardOK</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_DeleteCardOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_DeleteCardOK &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[29a]"></a>GoPage_DeleteFPFail</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_DeleteFPFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_DeleteFPFail &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[29b]"></a>GoPage_DeleteFPOk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_DeleteFPOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_DeleteFPOk &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[29c]"></a>GoPage_ReadCard</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(i.GoPage_ReadCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_ReadCard &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
</UL>

<P><STRONG><a name="[29d]"></a>GoPage_ReadFPStep</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, display.o(i.GoPage_ReadFPStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = GoPage_ReadFPStep &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
</UL>

<P><STRONG><a name="[29e]"></a>GoPage_SenderUnlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, display.o(i.GoPage_SenderUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = GoPage_SenderUnlock &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF_Unlock
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>

<P><STRONG><a name="[269]"></a>HexStringToBytes</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, stringutil.o(i.HexStringToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HexStringToBytes &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>

<P><STRONG><a name="[1bd]"></a>I2C_S_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, i2c_soft.o(i.I2C_S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_S_Init &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_Out
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BQ34Z100_Init
</UL>

<P><STRONG><a name="[1b9]"></a>I2C_S_ReceiveData</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, i2c_soft.o(i.I2C_S_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_S_ReceiveData &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ34Z100_Read
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Read
</UL>

<P><STRONG><a name="[1b8]"></a>I2C_S_SendData</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, i2c_soft.o(i.I2C_S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_Out
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_In
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ34Z100_Read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetTime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Read
</UL>

<P><STRONG><a name="[1b7]"></a>I2C_S_Start</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, i2c_soft.o(i.I2C_S_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_S_Start &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_Out
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_In
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ34Z100_Read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetTime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Read
</UL>

<P><STRONG><a name="[1ba]"></a>I2C_S_Stop</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, i2c_soft.o(i.I2C_S_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_S_Stop &rArr; Set_SCL_In &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SCL_In
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_GetTime
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ34Z100_Read
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetTime
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Write
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Read
</UL>

<P><STRONG><a name="[329]"></a>IN_EP_Status</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usbd_stm32f10x.o(i.IN_EP_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IN_EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointUnconfigure
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferAbort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStall
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointConfigure
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_HW_Write
</UL>

<P><STRONG><a name="[2a9]"></a>ISO14443_3_ActiveABApp</STRONG> (Thumb, 402 bytes, Stack size 152 bytes, rfcard_app_rc531.o(i.ISO14443_3_ActiveABApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ClearDataParams
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_GetAts
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_SetConfig
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveAtrInf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PiccTest
</UL>

<P><STRONG><a name="[85]"></a>IdentifyProc</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, identifyproc.o(i.IdentifyProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = IdentifyProc &rArr; BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetStatus
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_GetFingerStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Match
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadFPComplete
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadCardComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[86]"></a>KeyProc</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, keyproc.o(i.KeyProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = KeyProc &rArr; HandleKeyEvent &rArr; GoPage_01_01_02_04 &rArr; DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOn
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_ScanKey
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[1cc]"></a>MY_USART_EnableDMA</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart_util.o(i.MY_USART_EnableDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MY_USART_EnableDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
</UL>

<P><STRONG><a name="[1cb]"></a>MY_USART_Init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, usart_util.o(i.MY_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MY_USART_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
</UL>

<P><STRONG><a name="[257]"></a>MY_USART_IsReceiveComplete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usart_util.o(i.MY_USART_IsReceiveComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MY_USART_IsReceiveComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetDMAChannel_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>

<P><STRONG><a name="[256]"></a>MY_USART_Receive_DMA</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usart_util.o(i.MY_USART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pGetDMAChannel_RX
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDiscard
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>

<P><STRONG><a name="[1e5]"></a>MY_USART_Transmit</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usart_util.o(i.MY_USART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MY_USART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_CommandV
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
</UL>

<P><STRONG><a name="[84]"></a>MessageProc</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, messageproc.o(i.MessageProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = MessageProc &rArr; ReadCard &rArr; BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushResponse
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadState
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDescription
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.app_main)
</UL>
<P><STRONG><a name="[343]"></a>OUT_EP_Status</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, usbd_stm32f10x.o(i.OUT_EP_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUT_EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointUnconfigure
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransferAbort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransfer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStall
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointConfigure
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>PICC_Init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, rfcard_app_rc531.o(i.PICC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PICC_Init &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscLoopInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_SoftReset
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phbalReg_Stub_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMful_Sw_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_Init
</UL>

<P><STRONG><a name="[1ee]"></a>PiccTest</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rfcard_app_rc531.o(i.PiccTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
</UL>

<P><STRONG><a name="[1ec]"></a>RC523_Identify</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rfcard_init.o(i.RC523_Identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RC523_Identify &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_Init
</UL>

<P><STRONG><a name="[1f4]"></a>RC523_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rfcard_init.o(i.RC523_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC523_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_Init
</UL>

<P><STRONG><a name="[2df]"></a>RC523_ReadByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rfcard_init.o(i.RC523_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>

<P><STRONG><a name="[2e2]"></a>RC523_WriteByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rfcard_init.o(i.RC523_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>

<P><STRONG><a name="[2b4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_EnableDMA
</UL>

<P><STRONG><a name="[2b6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
</UL>

<P><STRONG><a name="[1bc]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_GPIO_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Sensor_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BQ34Z100_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Init
</UL>

<P><STRONG><a name="[301]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1f2]"></a>RFDeactive</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rfcard_app_rc531.o(i.RFDeactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RFDeactive &rArr; phhalHw_FieldOff &rArr; phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
</UL>

<P><STRONG><a name="[1ef]"></a>RFMifareActive</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, rfcard_app_rc531.o(i.RFMifareActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = RFMifareActive &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
</UL>

<P><STRONG><a name="[1f0]"></a>RFMifareAuthenticationKey</STRONG> (Thumb, 310 bytes, Stack size 104 bytes, rfcard_app_rc531.o(i.RFMifareAuthenticationKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = RFMifareAuthenticationKey &rArr; phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Authenticate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_SetKey
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_FormatKeyEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
</UL>

<P><STRONG><a name="[1f1]"></a>RFMifareReadSector</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rfcard_app_rc531.o(i.RFMifareReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = RFMifareReadSector &rArr; phalMfc_Read &rArr; phalMfc_Sw_Read &rArr; phpalMifare_ExchangeL3 &rArr; phpalMifare_Sw_ExchangeL3 &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
</UL>

<P><STRONG><a name="[28a]"></a>SF_Unlock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, unlock.o(i.SF_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Stop
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_SenderUnlock
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03_01
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_02
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_01
</UL>

<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f0]"></a>SPI_IRQHandler</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, spi_stm32f10x.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>SaveAtrInf</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, rfcard_app_rc531.o(i.SaveAtrInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SaveAtrInf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
</UL>

<P><STRONG><a name="[1ad]"></a>SetResponse</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mputil.o(i.SetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = SetResponse &rArr; SetResponseV &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponseV
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadState
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFinger
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDescription
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCard
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2f9]"></a>SetResponseV</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, mputil.o(i.SetResponseV))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SetResponseV &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Write
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
</UL>

<P><STRONG><a name="[1aa]"></a>SkipNextString</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mputil.o(i.SkipNextString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SkipNextString &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Unread
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Read
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Available
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAdmin
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteAddrBook
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLog
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearGPS
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAdmin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearAddrBook
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthSender
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthRemove
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuthReceiver
</UL>

<P><STRONG><a name="[2a5]"></a>StartAddCard</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, addcard.o(i.StartAddCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = StartAddCard &rArr; StopAddCard &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a3]"></a>StartAddFP</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, addfp.o(i.StartAddFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = StartAddFP &rArr; StopAddFP &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a6]"></a>StopAddCard</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, addcard.o(i.StopAddCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = StopAddCard &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadJoin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadDetach
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a4]"></a>StopAddFP</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, addfp.o(i.StopAddFP))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = StopAddFP &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadJoin
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadDetach
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2ff]"></a>StringToTime</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stringutil.o(i.StringToTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = StringToTime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDescription
</UL>

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[282]"></a>TimeToString</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stringutil.o(i.TimeToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TimeToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDescription
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputLog
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
</UL>

<P><STRONG><a name="[2be]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDiscard
</UL>

<P><STRONG><a name="[1cd]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
</UL>

<P><STRONG><a name="[2bc]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
</UL>

<P><STRONG><a name="[2c0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Transmit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDiscard
</UL>

<P><STRONG><a name="[2b7]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
</UL>

<P><STRONG><a name="[3fd]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pDiscard
</UL>

<P><STRONG><a name="[2bf]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Transmit
</UL>

<P><STRONG><a name="[ac]"></a>USBD0_SignalDeviceEvent</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD0_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD0_SignalDeviceEvent &rArr; USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>USBD0_SignalEndpointEvent</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD0_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD0_SignalEndpointEvent &rArr; USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[304]"></a>USBD_ClassInitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ClassInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBD_ClassInitialize &rArr; USBD_HID_Initialize &rArr; USBD_ThreadCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[306]"></a>USBD_ClassUninitialize</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ClassUninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ClassUninitialize &rArr; USBD_HID_Uninitialize &rArr; USBD_ThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[310]"></a>USBD_Class_Endpoint0_InDataSent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_InDataSent))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
</UL>

<P><STRONG><a name="[312]"></a>USBD_Class_Endpoint0_OutDataReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_OutDataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
</UL>

<P><STRONG><a name="[314]"></a>USBD_Class_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_SetupPacketProcessed))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
</UL>

<P><STRONG><a name="[316]"></a>USBD_Class_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Class_Endpoint0_SetupPacketReceived))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
</UL>

<P><STRONG><a name="[1dc]"></a>USBD_Connect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_Connect &rArr; USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Init
</UL>

<P><STRONG><a name="[30f]"></a>USBD_Core_Endpoint0_InDataSent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_InDataSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Core_Endpoint0_InDataSent
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_InDataSent
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[311]"></a>USBD_Core_Endpoint0_OutDataReceived</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_OutDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Core_Endpoint0_OutDataReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_OutDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[313]"></a>USBD_Core_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketProcessed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketProcessed
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[315]"></a>USBD_Core_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_lib_core_device.o(i.USBD_Core_Endpoint0_SetupPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Core_Endpoint0_SetupPacketReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Class_Endpoint0_SetupPacketReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[81]"></a>USBD_Core_Thread</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Core_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBD_Core_Thread &rArr; USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(i.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[318]"></a>USBD_DataInStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[31a]"></a>USBD_DataOutStage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_DataOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[31b]"></a>USBD_Delay</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[bb]"></a>USBD_Device0_ConfigurationChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_ConfigurationChanged))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>USBD_Device0_DisableRemoteWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_DisableRemoteWakeup))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>USBD_Device0_EnableRemoteWakeup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_EnableRemoteWakeup))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>USBD_Device0_Endpoint0_InDataSent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Endpoint0_InDataSent))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>USBD_Device0_Endpoint0_OutDataReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Endpoint0_OutDataReceived))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>USBD_Device0_Endpoint0_SetupPacketProcessed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Endpoint0_SetupPacketProcessed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>USBD_Device0_Endpoint0_SetupPacketReceived</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Endpoint0_SetupPacketReceived))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[31d]"></a>USBD_Device0_EventReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_EventReset))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_Reset
</UL>

<P><STRONG><a name="[b8]"></a>USBD_Device0_HighSpeedActivated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_HighSpeedActivated))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>USBD_Device0_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>USBD_Device0_Reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_Device0_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_Device0_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device0_EventReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>USBD_Device0_Resumed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Resumed))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>USBD_Device0_Suspended</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Suspended))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>USBD_Device0_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>USBD_Device0_VbusChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Device0_VbusChanged))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[309]"></a>USBD_DriverDeviceConnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_DriverDeviceConnect &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[320]"></a>USBD_DriverDeviceSetAddress</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverDeviceSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DriverDeviceSetAddress &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[30c]"></a>USBD_DriverEndpointConfigure</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_DriverEndpointConfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[322]"></a>USBD_DriverEndpointStall</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_DriverEndpointStall &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[319]"></a>USBD_DriverEndpointTransfer</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>

<P><STRONG><a name="[321]"></a>USBD_DriverEndpointTransferAbort</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[323]"></a>USBD_DriverEndpointTransferGetResult</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
</UL>

<P><STRONG><a name="[324]"></a>USBD_DriverEndpointUnconfigure</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverEndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_DriverEndpointUnconfigure &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[353]"></a>USBD_DriverGetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[352]"></a>USBD_DriverGetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_DriverGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[325]"></a>USBD_DriverInitialize</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DriverInitialize &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[326]"></a>USBD_DriverPowerControl</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverPowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DriverPowerControl &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
</UL>

<P><STRONG><a name="[327]"></a>USBD_DriverReadSetupPacket</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbd_lib_drv.o(i.USBD_DriverReadSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_DriverReadSetupPacket &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[358]"></a>USBD_Endpoint0_ClearFeatureStall_MSC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_ClearFeatureStall_MSC))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[330]"></a>USBD_Endpoint0_Out_ADC_ReqToEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_ADC_ReqToEP))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[32e]"></a>USBD_Endpoint0_Out_ADC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_ADC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[32f]"></a>USBD_Endpoint0_Out_CDC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Out_CDC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[32d]"></a>USBD_Endpoint0_Out_HID_ReqToIF</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_Out_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBD_Endpoint0_Out_HID_ReqToIF &rArr; USBD_StatusInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetReport
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[355]"></a>USBD_Endpoint0_ReqGetDescriptor_HID</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_ReqGetDescriptor_HID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>

<P><STRONG><a name="[356]"></a>USBD_Endpoint0_ReqGetExtProp_CC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_ReqGetExtProp_CC))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
</UL>

<P><STRONG><a name="[33b]"></a>USBD_Endpoint0_Setup_ADC_ReqToEP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_ADC_ReqToEP))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[339]"></a>USBD_Endpoint0_Setup_ADC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_ADC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[33a]"></a>USBD_Endpoint0_Setup_CDC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_CDC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[337]"></a>USBD_Endpoint0_Setup_HID_ReqToIF</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, usbd_lib_core_hid.o(i.USBD_Endpoint0_Setup_HID_ReqToIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_Endpoint0_Setup_HID_ReqToIF &rArr; USBD_DataInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetProtocol
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetReport
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetProtocol
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetIdle
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[338]"></a>USBD_Endpoint0_Setup_MSC_ReqToIF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_Endpoint0_Setup_MSC_ReqToIF))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[344]"></a>USBD_EndpointStart</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[357]"></a>USBD_EndpointStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_EndpointStop))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
</UL>

<P><STRONG><a name="[b2]"></a>USBD_HID0_GetProtocol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_HID0_GetProtocol))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>USBD_HID0_GetReport</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, user_hid_0.o(i.USBD_HID0_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID0_GetReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>USBD_HID0_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_HID0_Initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>USBD_HID0_SetProtocol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_HID0_SetProtocol))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>USBD_HID0_SetReport</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, user_hid_0.o(i.USBD_HID0_SetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_HID0_SetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>USBD_HID0_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_config_0.o(i.USBD_HID0_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(.constdata)
</UL>
<P><STRONG><a name="[33f]"></a>USBD_HID_CoreGetIdle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreGetIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[341]"></a>USBD_HID_CoreGetProtocol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreGetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[33e]"></a>USBD_HID_CoreGetReport</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_CoreGetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_HID_CoreGetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[340]"></a>USBD_HID_CoreSetIdle</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_HID_CoreSetIdle &rArr; USBD_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[342]"></a>USBD_HID_CoreSetProtocol</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_HID_CoreSetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
</UL>

<P><STRONG><a name="[33d]"></a>USBD_HID_CoreSetReport</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_CoreSetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_HID_CoreSetReport
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
</UL>

<P><STRONG><a name="[345]"></a>USBD_HID_EndpointStart</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_EndpointStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
</UL>

<P><STRONG><a name="[1d9]"></a>USBD_HID_GetReportTrigger</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_GetReportTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Write
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Flush
</UL>

<P><STRONG><a name="[305]"></a>USBD_HID_Initialize</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBD_HID_Initialize &rArr; USBD_ThreadCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerCreate
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
</UL>

<P><STRONG><a name="[34e]"></a>USBD_HID_Reset</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBD_HID_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStop
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
</UL>

<P><STRONG><a name="[34f]"></a>USBD_HID_SetConfiguration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_HID_SetConfiguration &rArr; USBD_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TimerStart
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
</UL>

<P><STRONG><a name="[82]"></a>USBD_HID_Thread</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbd_lib_hid.o(i.USBD_HID_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBD_HID_Thread &rArr; USBD_HID_EpIntOut &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsWait
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(i.USBD_ThreadCreate)
</UL>
<P><STRONG><a name="[83]"></a>USBD_HID_Timer</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBD_HID_Timer &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreAcquire
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_config_0.o(i.USBD_TimerCreate)
</UL>
<P><STRONG><a name="[307]"></a>USBD_HID_Uninitialize</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbd_lib_hid.o(i.USBD_HID_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_HID_Uninitialize &rArr; USBD_ThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
</UL>

<P><STRONG><a name="[1db]"></a>USBD_Initialize</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, usbd_lib_core.o(i.USBD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBD_Initialize &rArr; USBD_ClassInitialize &rArr; USBD_HID_Initialize &rArr; USBD_ThreadCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadTerminate
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadCreate
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreDelete
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreCreate
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassUninitialize
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClassInitialize
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetVersion
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverGetCapabilities
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CheckDevice
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Init
</UL>

<P><STRONG><a name="[30d]"></a>USBD_Reset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBD_Reset &rArr; USBD_HID_Reset &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[31e]"></a>USBD_SemaphoreAcquire</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_SemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_SemaphoreAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[34d]"></a>USBD_SemaphoreCreate</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbd_config_0.o(i.USBD_SemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_SemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[350]"></a>USBD_SemaphoreDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_SemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_SemaphoreDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>

<P><STRONG><a name="[31f]"></a>USBD_SemaphoreRelease</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_SemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverPowerControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverInitialize
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceConnect
</UL>

<P><STRONG><a name="[359]"></a>USBD_SetConfiguration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_SetConfiguration &rArr; USBD_HID_SetConfiguration &rArr; USBD_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
</UL>

<P><STRONG><a name="[302]"></a>USBD_SignalDeviceEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_drv.o(i.USBD_SignalDeviceEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_SignalDeviceEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalDeviceEvent
</UL>

<P><STRONG><a name="[303]"></a>USBD_SignalEndpointEvent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_lib_drv.o(i.USBD_SignalEndpointEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_SignalEndpointEvent &rArr; USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD0_SignalEndpointEvent
</UL>

<P><STRONG><a name="[32c]"></a>USBD_StatusInStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_StatusInStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[32b]"></a>USBD_StatusInStageDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusInStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_StatusInStageDone &rArr; USBD_DriverEndpointTransferGetResult &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[32a]"></a>USBD_StatusOutStage</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_StatusOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBD_StatusOutStage &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[331]"></a>USBD_StatusOutStageDone</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbd_lib_core.o(i.USBD_StatusOutStageDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_StatusOutStageDone &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[34b]"></a>USBD_ThreadCreate</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, usbd_config_0.o(i.USBD_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_ThreadCreate &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[35d]"></a>USBD_ThreadFlagsSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_ThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalEndpointEvent
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SignalDeviceEvent
</UL>

<P><STRONG><a name="[317]"></a>USBD_ThreadFlagsWait</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_ThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_ThreadFlagsWait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[351]"></a>USBD_ThreadTerminate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_ThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
</UL>

<P><STRONG><a name="[34c]"></a>USBD_TimerCreate</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbd_config_0.o(i.USBD_TimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_TimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
</UL>

<P><STRONG><a name="[347]"></a>USBD_TimerStart</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbd_config_0.o(i.USBD_TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
</UL>

<P><STRONG><a name="[348]"></a>USBD_TimerStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_config_0.o(i.USBD_TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_TimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
</UL>

<P><STRONG><a name="[28]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, usbd_stm32f10x.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USBD_EP_HW_Write &rArr; IN_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_HW_Write
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_HW_Read
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[363]"></a>__sys_close</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_close
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[368]"></a>__sys_flen</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sys_flen &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_flen
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[36b]"></a>__sys_open</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_open
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_handle_get
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_handle_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[371]"></a>__sys_read</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[374]"></a>__sys_seek</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[377]"></a>__sys_write</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[15d]"></a>__user_perthread_libspace</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_lib.o(i.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[37c]"></a>_fdelete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fs_mapi.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[116]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c3]"></a>_mutex_acquire</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c4]"></a>_mutex_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_free
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[c5]"></a>_mutex_initialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[c6]"></a>_mutex_release</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$fflush
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[fc]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[11e]"></a>_sys_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[147]"></a>_sys_flen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _sys_flen &rArr; __sys_flen &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[145]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[127]"></a>_sys_open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[154]"></a>_sys_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, retarget_io.o(i._sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[14a]"></a>_sys_seek</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[14b]"></a>_sys_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[366]"></a>efs_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_close))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[37e]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_delete))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3b8]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_ffind))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[36a]"></a>efs_flen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_flen))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[3bb]"></a>efs_free</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_config.o(i.efs_free))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[36f]"></a>efs_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3bc]"></a>efs_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_info))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
</UL>

<P><STRONG><a name="[3be]"></a>efs_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_init))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3bf]"></a>efs_mount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_mount))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[370]"></a>efs_open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_open))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[373]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_read))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[376]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.efs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[379]"></a>efs_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.efs_write))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[3ae]"></a>elink_cmd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[3c3]"></a>elink_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_delete))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
</UL>

<P><STRONG><a name="[3a1]"></a>elink_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_dir))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3ac]"></a>elink_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_init))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3c9]"></a>elink_insert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_insert))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3cc]"></a>elink_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.elink_scan))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[365]"></a>fat_close</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, fs_fat.o(i.fat_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fat_close &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[37d]"></a>fat_delete</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3a7]"></a>fat_ffind</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[369]"></a>fat_flen</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.fat_flen))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>

<P><STRONG><a name="[3a8]"></a>fat_free</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fs_fat.o(i.fat_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_free &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
</UL>

<P><STRONG><a name="[36d]"></a>fat_handle_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, fs_fat.o(i.fat_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_handle_get &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[3a9]"></a>fat_info</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_fat.o(i.fat_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fat_info &rArr; fat_vol_chk &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
</UL>

<P><STRONG><a name="[3aa]"></a>fat_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_init &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_init
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[3b3]"></a>fat_jour_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fat_jour_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[3ad]"></a>fat_mount</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, fs_fat.o(i.fat_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_jour_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
</UL>

<P><STRONG><a name="[36e]"></a>fat_open</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, fs_fat.o(i.fat_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_locked
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[372]"></a>fat_read</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fat_read &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[3b5]"></a>fat_rmdir</STRONG> (Thumb, 538 bytes, Stack size 96 bytes, fs_fat.o(i.fat_rmdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fat_rmdir &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_param
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_PathName
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
</UL>

<P><STRONG><a name="[375]"></a>fat_seek</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fat_seek &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[39b]"></a>fat_vol_chk</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, fs_fat.o(i.fat_vol_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fat_vol_chk &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_info
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[378]"></a>fat_write</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fat_write &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_vol_chk
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_InvalidParameter
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_FileHandleInvalid
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[25b]"></a>fdelete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fdelete &rArr; _fdelete &rArr; fat_delete &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteFile
</UL>

<P><STRONG><a name="[21f]"></a>ffind</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ffind &rArr; fat_ffind &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_Find
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetUserCount
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
</UL>

<P><STRONG><a name="[25e]"></a>ffree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_mapi.o(i.ffree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ffree &rArr; fat_free &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_free
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_GetDriveInfo
</UL>

<P><STRONG><a name="[25d]"></a>finfo</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fs_mapi.o(i.finfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = finfo &rArr; fat_info &rArr; fat_vol_chk &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_info
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_info
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_GetDriveInfo
</UL>

<P><STRONG><a name="[260]"></a>finit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = finit &rArr; fs_drive_id &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>

<P><STRONG><a name="[261]"></a>fmount</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_mapi.o(i.fmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fmount &rArr; fat_mount &rArr; fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_mount
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_SetReady
</UL>

<P><STRONG><a name="[25a]"></a>frmdir</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fs_mapi.o(i.frmdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = frmdir &rArr; fat_rmdir &rArr; frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_release
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_acquire
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSys_DeleteDirectory
</UL>

<P><STRONG><a name="[3ab]"></a>fs_config</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_config.o(i.fs_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_config
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mutex_new
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[3ce]"></a>fs_config_evr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_mapi.o(i.fs_config_evr))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[36c]"></a>fs_drive_id</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fs_common.o(i.fs_drive_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fs_drive_id &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3cf]"></a>fs_get_rtos_tick_freq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_rtos_tick_freq))
<BR><BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[3d2]"></a>fs_get_sys_tick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_get_sys_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_get_sys_tick &rArr; osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[3d3]"></a>fs_get_sys_tick_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_config.o(i.fs_get_sys_tick_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_get_sys_tick_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>

<P><STRONG><a name="[393]"></a>fs_get_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[3f4]"></a>fs_mc_lock_unlock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_mc_mci.o(i.fs_mc_lock_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3f0]"></a>fs_mc_read_cd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_cd))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_update_sw_state
</UL>

<P><STRONG><a name="[3f2]"></a>fs_mc_read_wp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_read_wp))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_update_sw_state
</UL>

<P><STRONG><a name="[3e3]"></a>fs_mc_spi_control_ss</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_mc_spi.o(i.fs_mc_spi_control_ss))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
</UL>

<P><STRONG><a name="[364]"></a>fs_mutex_acquire</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3d1]"></a>fs_mutex_new</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fs_mutex_new))
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>

<P><STRONG><a name="[367]"></a>fs_mutex_release</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frmdir
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmount
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finfo
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffree
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[3d0]"></a>fs_set_cdrive</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_set_cdrive))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_component_init
</UL>

<P><STRONG><a name="[3d4]"></a>fs_set_rtos_delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_config.o(i.fs_set_rtos_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_set_rtos_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3b9]"></a>fs_strmatch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_common.o(i.fs_strmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fs_strmatch &rArr; fs_strncasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strncasecmp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[3ba]"></a>fs_strncasecmp</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, fs_common.o(i.fs_strncasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strmatch
</UL>

<P><STRONG><a name="[3b7]"></a>fs_strpos</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_common.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[38d]"></a>fsj_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_config.o(i.fsj_write))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[386]"></a>get_u16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.get_u16))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[387]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_common.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_drive_id
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[100]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3d7]"></a>mc_spi_DevCtrl</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, fs_mc_spi.o(i.mc_spi_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_cd
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_update_sw_state
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_DevCtrl
</UL>

<P><STRONG><a name="[2b3]"></a>mc_spi_DrvEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_spi_DrvEvent))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC0_SPI_SignalEvent
</UL>

<P><STRONG><a name="[3d8]"></a>mc_spi_Init</STRONG> (Thumb, 1194 bytes, Stack size 80 bytes, fs_mc_spi.o(i.mc_spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mc_spi_Init &rArr; mc_control_lock &rArr; mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_rtos_delay
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_wp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_cd
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_lock_unlock
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_csd
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_parse_cid
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[3d9]"></a>mc_spi_ReadInfo</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_spi_ReadInfo &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[3da]"></a>mc_spi_ReadSector</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_spi_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[3db]"></a>mc_spi_UnInit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_spi_UnInit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[3dc]"></a>mc_spi_WriteSector</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_spi_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[17c]"></a>osRtxErrorNotify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[68]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[2e6]"></a>phKeyStore_FormatKeyEntry</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phkeystore.o(i.phKeyStore_FormatKeyEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = phKeyStore_FormatKeyEntry &rArr; phKeyStore_Sw_FormatKeyEntry &rArr; phKeyStore_Sw_GetKeyValuePtrPos
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_FormatKeyEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
</UL>

<P><STRONG><a name="[401]"></a>phKeyStore_GetKey</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phkeystore.o(i.phKeyStore_GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = phKeyStore_GetKey &rArr; phKeyStore_Sw_GetKey &rArr; phKeyStore_Sw_GetKeyValuePtrVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticateKeyNo
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Authenticate
</UL>

<P><STRONG><a name="[407]"></a>phKeyStore_GetKeySize</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, phkeystore.o(i.phKeyStore_GetKeySize))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_SetKey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKey
</UL>

<P><STRONG><a name="[2e7]"></a>phKeyStore_SetKey</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phkeystore.o(i.phKeyStore_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = phKeyStore_SetKey &rArr; phKeyStore_Sw_SetKey &rArr; phKeyStore_Sw_GetKeyValuePtrVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
</UL>

<P><STRONG><a name="[406]"></a>phKeyStore_Sw_CheckUpdateKUC</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, phkeystore_sw.o(i.phKeyStore_Sw_CheckUpdateKUC))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKey
</UL>

<P><STRONG><a name="[400]"></a>phKeyStore_Sw_FormatKeyEntry</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, phkeystore_sw.o(i.phKeyStore_Sw_FormatKeyEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = phKeyStore_Sw_FormatKeyEntry &rArr; phKeyStore_Sw_GetKeyValuePtrPos
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKeyValuePtrPos
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_FormatKeyEntry
</UL>

<P><STRONG><a name="[402]"></a>phKeyStore_Sw_GetKey</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, phkeystore_sw.o(i.phKeyStore_Sw_GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phKeyStore_Sw_GetKey &rArr; phKeyStore_Sw_GetKeyValuePtrVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKeyValuePtrVersion
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_CheckUpdateKUC
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_GetKeySize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_GetKey
</UL>

<P><STRONG><a name="[404]"></a>phKeyStore_Sw_GetKeyValuePtrPos</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, phkeystore_sw.o(i.phKeyStore_Sw_GetKeyValuePtrPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phKeyStore_Sw_GetKeyValuePtrPos
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_Init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_FormatKeyEntry
</UL>

<P><STRONG><a name="[405]"></a>phKeyStore_Sw_GetKeyValuePtrVersion</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, phkeystore_sw.o(i.phKeyStore_Sw_GetKeyValuePtrVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phKeyStore_Sw_GetKeyValuePtrVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_SetKey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKey
</UL>

<P><STRONG><a name="[2dc]"></a>phKeyStore_Sw_Init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, phkeystore_sw.o(i.phKeyStore_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = phKeyStore_Sw_Init &rArr; phKeyStore_Sw_GetKeyValuePtrPos
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKeyValuePtrPos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[403]"></a>phKeyStore_Sw_SetKey</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, phkeystore_sw.o(i.phKeyStore_Sw_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phKeyStore_Sw_SetKey &rArr; phKeyStore_Sw_GetKeyValuePtrVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_Sw_GetKeyValuePtrVersion
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_GetKeySize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_SetKey
</UL>

<P><STRONG><a name="[462]"></a>phTools_CalculateCrc16</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, phtools.o(i.phTools_CalculateCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phTools_CalculateCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_ExchangeL3
</UL>

<P><STRONG><a name="[235]"></a>phacDiscLoop_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, phacdiscloop.o(i.phacDiscLoop_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = phacDiscLoop_SetConfig &rArr; phacDiscLoop_Sw_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscLoopInit
</UL>

<P><STRONG><a name="[2ac]"></a>phacDiscLoop_Sw_GetAts</STRONG> (Thumb, 672 bytes, Stack size 32 bytes, phacdiscloop_sw.o(i.phacDiscLoop_Sw_GetAts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = phacDiscLoop_Sw_GetAts &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
</UL>

<P><STRONG><a name="[2d9]"></a>phacDiscLoop_Sw_Init</STRONG> (Thumb, 324 bytes, Stack size 12 bytes, phacdiscloop_sw.o(i.phacDiscLoop_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phacDiscLoop_Sw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[40a]"></a>phacDiscLoop_Sw_Int_ActivateA</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_ActivateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Atr
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_SetProtocol
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[40e]"></a>phacDiscLoop_Sw_Int_ActivateB</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_ActivateB))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = phacDiscLoop_Sw_Int_ActivateB &rArr; phpalI14443p3b_Sw_ActivateCard &rArr; phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_SetProtocol
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[2aa]"></a>phacDiscLoop_Sw_Int_ClearDataParams</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_ClearDataParams))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
</UL>

<P><STRONG><a name="[410]"></a>phacDiscLoop_Sw_Int_CollisionResolutionA</STRONG> (Thumb, 550 bytes, Stack size 80 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_CollisionResolutionA))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = phacDiscLoop_Sw_Int_CollisionResolutionA &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[415]"></a>phacDiscLoop_Sw_Int_CollisionResolutionB</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_CollisionResolutionB))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = phacDiscLoop_Sw_Int_CollisionResolutionB &rArr; phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[419]"></a>phacDiscLoop_Sw_Int_DetectA</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_DetectA))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = phacDiscLoop_Sw_Int_DetectA &rArr; phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[41b]"></a>phacDiscLoop_Sw_Int_DetectB</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_DetectB))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = phacDiscLoop_Sw_Int_DetectB &rArr; phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[41c]"></a>phacDiscLoop_Sw_Int_DetectF</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, phacdiscloop_sw_int.o(i.phacDiscLoop_Sw_Int_DetectF))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = phacDiscLoop_Sw_Int_DetectF &rArr; phpalFelica_ReqC &rArr; phpalFelica_Sw_ReqC &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_ReqC
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[408]"></a>phacDiscLoop_Sw_SetConfig</STRONG> (Thumb, 972 bytes, Stack size 12 bytes, phacdiscloop_sw.o(i.phacDiscLoop_Sw_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phacDiscLoop_Sw_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_SetConfig
</UL>

<P><STRONG><a name="[2ab]"></a>phacDiscLoop_Sw_Start</STRONG> (Thumb, 1060 bytes, Stack size 72 bytes, phacdiscloop_sw.o(i.phacDiscLoop_Sw_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_ResetProtocol
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Atr
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectF
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectB
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectA
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionB
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateB
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
</UL>

<P><STRONG><a name="[2e8]"></a>phalMfc_Authenticate</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, phalmfc.o(i.phalMfc_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = phalMfc_Authenticate &rArr; phalMfc_Sw_Authenticate &rArr; phpalMifare_MfcAuthenticateKeyNo &rArr; phpalMifare_Sw_MfcAuthenticateKeyNo &rArr; phhalHw_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Authenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
</UL>

<P><STRONG><a name="[2e9]"></a>phalMfc_Read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phalmfc.o(i.phalMfc_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = phalMfc_Read &rArr; phalMfc_Sw_Read &rArr; phpalMifare_ExchangeL3 &rArr; phpalMifare_Sw_ExchangeL3 &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareReadSector
</UL>

<P><STRONG><a name="[421]"></a>phalMfc_Sw_Authenticate</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, phalmfc_sw.o(i.phalMfc_Sw_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = phalMfc_Sw_Authenticate &rArr; phpalMifare_MfcAuthenticateKeyNo &rArr; phpalMifare_Sw_MfcAuthenticateKeyNo &rArr; phhalHw_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_MfcAuthenticateKeyNo
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_MfcAuthenticate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Authenticate
</UL>

<P><STRONG><a name="[2d7]"></a>phalMfc_Sw_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, phalmfc_sw.o(i.phalMfc_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phalMfc_Sw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[422]"></a>phalMfc_Sw_Read</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, phalmfc_sw.o(i.phalMfc_Sw_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = phalMfc_Sw_Read &rArr; phpalMifare_ExchangeL3 &rArr; phpalMifare_Sw_ExchangeL3 &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_ExchangeL3
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Read
</UL>

<P><STRONG><a name="[2d8]"></a>phalMful_Sw_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phalmful_sw.o(i.phalMful_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phalMful_Sw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[2ce]"></a>phbalReg_Stub_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, phbalreg_stub.o(i.phbalReg_Stub_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[2e4]"></a>phhalHw_ApplyProtocolSettings</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_ApplyProtocolSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = phhalHw_ApplyProtocolSettings &rArr; phhalHw_Rc523_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareActive
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateB
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[427]"></a>phhalHw_Exchange</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, phhalhw.o(i.phhalHw_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_WriteFrameHeader
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Deselect
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_ReqC
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_ExchangeL3
</UL>

<P><STRONG><a name="[2ad]"></a>phhalHw_FieldOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = phhalHw_FieldOff &rArr; phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_3_ActiveABApp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFDeactive
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[41f]"></a>phhalHw_FieldOn</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_FieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = phhalHw_FieldOn &rArr; phhalHw_Rc523_FieldOn &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[2e3]"></a>phhalHw_FieldReset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_FieldReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_FieldReset &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareActive
</UL>

<P><STRONG><a name="[41e]"></a>phhalHw_GetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phhalhw.o(i.phhalHw_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = phhalHw_GetConfig &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_ExchangeL3
</UL>

<P><STRONG><a name="[42c]"></a>phhalHw_MfcAuthenticate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, phhalhw.o(i.phhalHw_MfcAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = phhalHw_MfcAuthenticate &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_MfcAuthenticate
</UL>

<P><STRONG><a name="[42e]"></a>phhalHw_MfcAuthenticateKeyNo</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phhalhw.o(i.phhalHw_MfcAuthenticateKeyNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = phhalHw_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticateKeyNo
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_MfcAuthenticateKeyNo
</UL>

<P><STRONG><a name="[426]"></a>phhalHw_Rc523_ApplyProtocolSettings</STRONG> (Thumb, 934 bytes, Stack size 40 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_ApplyProtocolSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = phhalHw_Rc523_ApplyProtocolSettings &rArr; phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ApplyProtocolSettings
</UL>

<P><STRONG><a name="[2da]"></a>phhalHw_Rc523_Cmd_SoftReset</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, phhalhw_rc523_cmd.o(i.phhalHw_Rc523_Cmd_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = phhalHw_Rc523_Cmd_SoftReset &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[428]"></a>phhalHw_Rc523_Exchange</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>

<P><STRONG><a name="[438]"></a>phhalHw_Rc523_ExchangeReceive</STRONG> (Thumb, 768 bytes, Stack size 72 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_ExchangeReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[437]"></a>phhalHw_Rc523_ExchangeTransmit</STRONG> (Thumb, 572 bytes, Stack size 72 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_ExchangeTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = phhalHw_Rc523_ExchangeTransmit &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
</UL>

<P><STRONG><a name="[429]"></a>phhalHw_Rc523_FieldOff</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phhalHw_Rc523_FieldOff &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOff
</UL>

<P><STRONG><a name="[42a]"></a>phhalHw_Rc523_FieldOn</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_FieldOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phhalHw_Rc523_FieldOn &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldOn
</UL>

<P><STRONG><a name="[2db]"></a>phhalHw_Rc523_FieldReset</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_FieldReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_FieldReset
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[435]"></a>phhalHw_Rc523_FlushFifo</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_FlushFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phhalHw_Rc523_FlushFifo &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[42b]"></a>phhalHw_Rc523_GetConfig</STRONG> (Thumb, 774 bytes, Stack size 40 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_GetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[43c]"></a>phhalHw_Rc523_GetFdt</STRONG> (Thumb, 390 bytes, Stack size 64 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_GetFdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = phhalHw_Rc523_GetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[43a]"></a>phhalHw_Rc523_GetRxBuffer</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_GetRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[434]"></a>phhalHw_Rc523_GetTxBuffer</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_GetTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = phhalHw_Rc523_GetTxBuffer &rArr; phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
</UL>

<P><STRONG><a name="[2cf]"></a>phhalHw_Rc523_Init</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phhalHw_Rc523_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[42d]"></a>phhalHw_Rc523_MfcAuthenticate</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_MfcAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticateKeyNo
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticate
</UL>

<P><STRONG><a name="[42f]"></a>phhalHw_Rc523_MfcAuthenticateKeyNo</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_MfcAuthenticateKeyNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phKeyStore_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticateKeyNo
</UL>

<P><STRONG><a name="[446]"></a>phhalHw_Rc523_ReadData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = phhalHw_Rc523_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
</UL>

<P><STRONG><a name="[43b]"></a>phhalHw_Rc523_ReadFifo</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = phhalHw_Rc523_ReadFifo &rArr; phhalHw_Rc523_ReadData &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadData
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[2de]"></a>phhalHw_Rc523_ReadRegister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadFifo
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[432]"></a>phhalHw_Rc523_SetConfig</STRONG> (Thumb, 1976 bytes, Stack size 64 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + In Cycle
<LI>Call Chain = phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetTxBuffer
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
</UL>

<P><STRONG><a name="[447]"></a>phhalHw_Rc523_SetFdt</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_SetFdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
</UL>

<P><STRONG><a name="[43e]"></a>phhalHw_Rc523_Wait</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldReset
</UL>

<P><STRONG><a name="[439]"></a>phhalHw_Rc523_WaitIrq</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, phhalhw_rc523_wait.o(i.phhalHw_Rc523_WaitIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = phhalHw_Rc523_WaitIrq &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[44b]"></a>phhalHw_Rc523_WriteData</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteFifo
</UL>

<P><STRONG><a name="[43d]"></a>phhalHw_Rc523_WriteFifo</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, phhalhw_rc523_int.o(i.phhalHw_Rc523_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
</UL>

<P><STRONG><a name="[436]"></a>phhalHw_Rc523_WriteRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, phhalhw_rc523.o(i.phhalHw_Rc523_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_WriteRegister
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FlushFifo
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
</UL>

<P><STRONG><a name="[431]"></a>phhalHw_ReadRegister</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetConfig
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ReadData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[433]"></a>phhalHw_SetConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phhalhw.o(i.phhalHw_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = phhalHw_SetConfig &rArr; phhalHw_Rc523_SetConfig &rArr;  phhalHw_SetConfig (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_HaltB
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_HaltA
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_ReqC
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_ExchangeL3
</UL>

<P><STRONG><a name="[44c]"></a>phhalHw_Wait</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, phhalhw.o(i.phhalHw_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = phhalHw_Wait &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_ReqC
</UL>

<P><STRONG><a name="[430]"></a>phhalHw_WriteRegister</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, phhalhw.o(i.phhalHw_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetConfig
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_MfcAuthenticate
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOn
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_FieldOff
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Exchange
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ApplyProtocolSettings
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Cmd_SoftReset
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WriteData
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_WaitIrq
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeTransmit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_ExchangeReceive
</UL>

<P><STRONG><a name="[41d]"></a>phpalFelica_ReqC</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, phpalfelica.o(i.phpalFelica_ReqC))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = phpalFelica_ReqC &rArr; phpalFelica_Sw_ReqC &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_Sw_ReqC
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectF
</UL>

<P><STRONG><a name="[2d6]"></a>phpalFelica_Sw_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phpalfelica_sw.o(i.phpalFelica_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[44d]"></a>phpalFelica_Sw_ReqC</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, phpalfelica_sw.o(i.phpalFelica_Sw_ReqC))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = phpalFelica_Sw_ReqC &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalFelica_ReqC
</UL>

<P><STRONG><a name="[44e]"></a>phpalI14443p3aEMV_Sw_Anticollision</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(i.phpalI14443p3aEMV_Sw_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[2e5]"></a>phpalI14443p3a_Sw_ActivateCard</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_ActivateCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = phpalI14443p3a_Sw_ActivateCard &rArr; phpalI14443p3a_Sw_Select &rArr; phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_Select
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3aEMV_Sw_Anticollision
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareAuthenticationKey
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFMifareActive
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
</UL>

<P><STRONG><a name="[411]"></a>phpalI14443p3a_Sw_Anticollision</STRONG> (Thumb, 858 bytes, Stack size 88 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3aEMV_Sw_Anticollision
</UL>

<P><STRONG><a name="[413]"></a>phpalI14443p3a_Sw_HaltA</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_HaltA))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = phpalI14443p3a_Sw_HaltA &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
</UL>

<P><STRONG><a name="[2d0]"></a>phpalI14443p3a_Sw_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[414]"></a>phpalI14443p3a_Sw_RequestA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_RequestA))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = phpalI14443p3a_Sw_RequestA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[44f]"></a>phpalI14443p3a_Sw_RequestAEx</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_RequestAEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_WakeUpA
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestA
</UL>

<P><STRONG><a name="[412]"></a>phpalI14443p3a_Sw_Select</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = phpalI14443p3a_Sw_Select &rArr; phpalI14443p3aEMV_Sw_Anticollision &rArr; phpalI14443p3a_Sw_Anticollision &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3aEMV_Sw_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionA
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[41a]"></a>phpalI14443p3a_Sw_WakeUpA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, phpali14443p3a_sw.o(i.phpalI14443p3a_Sw_WakeUpA))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = phpalI14443p3a_Sw_WakeUpA &rArr; phpalI14443p3a_Sw_RequestAEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_RequestAEx
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectA
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[40f]"></a>phpalI14443p3b_Sw_ActivateCard</STRONG> (Thumb, 354 bytes, Stack size 96 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_ActivateCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = phpalI14443p3b_Sw_ActivateCard &rArr; phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_WakeUpB
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_DecideBaudRateEx
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateB
</UL>

<P><STRONG><a name="[452]"></a>phpalI14443p3b_Sw_Attrib</STRONG> (Thumb, 484 bytes, Stack size 88 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_Attrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = phpalI14443p3b_Sw_Attrib &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[454]"></a>phpalI14443p3b_Sw_CheckATQBEx</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_CheckATQBEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_SlotMarker
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>

<P><STRONG><a name="[451]"></a>phpalI14443p3b_Sw_DecideBaudRateEx</STRONG> (Thumb, 320 bytes, Stack size 12 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_DecideBaudRateEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = phpalI14443p3b_Sw_DecideBaudRateEx
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[417]"></a>phpalI14443p3b_Sw_HaltB</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_HaltB))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = phpalI14443p3b_Sw_HaltB &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionB
</UL>

<P><STRONG><a name="[2d1]"></a>phpalI14443p3b_Sw_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[418]"></a>phpalI14443p3b_Sw_RequestB</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_RequestB))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = phpalI14443p3b_Sw_RequestB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_DetectB
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionB
</UL>

<P><STRONG><a name="[455]"></a>phpalI14443p3b_Sw_RequestBEx</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_RequestBEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestB
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_WakeUpB
</UL>

<P><STRONG><a name="[416]"></a>phpalI14443p3b_Sw_SlotMarker</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_SlotMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = phpalI14443p3b_Sw_SlotMarker &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_CheckATQBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_CollisionResolutionB
</UL>

<P><STRONG><a name="[450]"></a>phpalI14443p3b_Sw_WakeUpB</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, phpali14443p3b_sw.o(i.phpalI14443p3b_Sw_WakeUpB))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = phpalI14443p3b_Sw_WakeUpB &rArr; phpalI14443p3b_Sw_RequestBEx &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_RequestBEx
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_ActivateCard
</UL>

<P><STRONG><a name="[2d3]"></a>phpalI14443p4_Sw_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, phpali14443p4_sw.o(i.phpalI14443p4_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phpalI14443p4_Sw_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_ResetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[456]"></a>phpalI14443p4_Sw_ResetProtocol</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, phpali14443p4_sw.o(i.phpalI14443p4_Sw_ResetProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4_Sw_Init
</UL>

<P><STRONG><a name="[40c]"></a>phpalI14443p4_Sw_SetProtocol</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, phpali14443p4_sw.o(i.phpalI14443p4_Sw_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = phpalI14443p4_Sw_SetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateB
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
</UL>

<P><STRONG><a name="[40b]"></a>phpalI14443p4a_Sw_ActivateCard</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, phpali14443p4a_sw.o(i.phpalI14443p4a_Sw_ActivateCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = phpalI14443p4a_Sw_ActivateCard &rArr; phpalI14443p4a_Sw_Rats &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Rats
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_Pps
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
</UL>

<P><STRONG><a name="[2d2]"></a>phpalI14443p4a_Sw_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, phpali14443p4a_sw.o(i.phpalI14443p4a_Sw_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[458]"></a>phpalI14443p4a_Sw_Pps</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, phpali14443p4a_sw.o(i.phpalI14443p4a_Sw_Pps))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = phpalI14443p4a_Sw_Pps &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[457]"></a>phpalI14443p4a_Sw_Rats</STRONG> (Thumb, 740 bytes, Stack size 64 bytes, phpali14443p4a_sw.o(i.phpalI14443p4a_Sw_Rats))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = phpalI14443p4a_Sw_Rats &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Wait
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p4a_Sw_ActivateCard
</UL>

<P><STRONG><a name="[40d]"></a>phpalI18092mPI_Atr</STRONG> (Thumb, 80 bytes, Stack size 80 bytes, phpali18092mpi.o(i.phpalI18092mPI_Atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Int_ActivateA
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[420]"></a>phpalI18092mPI_ResetProtocol</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, phpali18092mpi.o(i.phpalI18092mPI_ResetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phpalI18092mPI_ResetProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_ResetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[459]"></a>phpalI18092mPI_Sw_Atr</STRONG> (Thumb, 780 bytes, Stack size 136 bytes, phpali18092mpi_sw.o(i.phpalI18092mPI_Sw_Atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_WriteFrameHeader
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_ConvertDatarate
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Deselect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Atr
</UL>

<P><STRONG><a name="[45b]"></a>phpalI18092mPI_Sw_ConvertDatarate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, phpali18092mpi_sw_int.o(i.phpalI18092mPI_Sw_ConvertDatarate))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
</UL>

<P><STRONG><a name="[45e]"></a>phpalI18092mPI_Sw_Deselect</STRONG> (Thumb, 250 bytes, Stack size 88 bytes, phpali18092mpi_sw.o(i.phpalI18092mPI_Sw_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_WriteFrameHeader
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
</UL>

<P><STRONG><a name="[2d5]"></a>phpalI18092mPI_Sw_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, phpali18092mpi_sw.o(i.phpalI18092mPI_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phpalI18092mPI_Sw_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_ResetProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[45a]"></a>phpalI18092mPI_Sw_ResetProtocol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, phpali18092mpi_sw.o(i.phpalI18092mPI_Sw_ResetProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_ResetProtocol
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Init
</UL>

<P><STRONG><a name="[45d]"></a>phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, phpali18092mpi_sw_int.o(i.phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = phpalI18092mPI_Sw_ValidateAndNormalizeResponseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Deselect
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
</UL>

<P><STRONG><a name="[45c]"></a>phpalI18092mPI_Sw_WriteFrameHeader</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, phpali18092mpi_sw_int.o(i.phpalI18092mPI_Sw_WriteFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Deselect
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI18092mPI_Sw_Atr
</UL>

<P><STRONG><a name="[425]"></a>phpalMifare_ExchangeL3</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpalmifare.o(i.phpalMifare_ExchangeL3))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = phpalMifare_ExchangeL3 &rArr; phpalMifare_Sw_ExchangeL3 &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_ExchangeL3
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Read
</UL>

<P><STRONG><a name="[424]"></a>phpalMifare_MfcAuthenticate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, phpalmifare.o(i.phpalMifare_MfcAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = phpalMifare_MfcAuthenticate &rArr; phpalMifare_Sw_MfcAuthenticate &rArr; phhalHw_MfcAuthenticate &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_MfcAuthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Authenticate
</UL>

<P><STRONG><a name="[423]"></a>phpalMifare_MfcAuthenticateKeyNo</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, phpalmifare.o(i.phpalMifare_MfcAuthenticateKeyNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = phpalMifare_MfcAuthenticateKeyNo &rArr; phpalMifare_Sw_MfcAuthenticateKeyNo &rArr; phhalHw_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_Sw_MfcAuthenticateKeyNo
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phalMfc_Sw_Authenticate
</UL>

<P><STRONG><a name="[45f]"></a>phpalMifare_Sw_ExchangeL3</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, phpalmifare_sw.o(i.phpalMifare_Sw_ExchangeL3))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = phpalMifare_Sw_ExchangeL3 &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_SetConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Exchange
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_GetConfig
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phTools_CalculateCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_ExchangeL3
</UL>

<P><STRONG><a name="[2d4]"></a>phpalMifare_Sw_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, phpalmifare_sw.o(i.phpalMifare_Sw_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = phpalMifare_Sw_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Init
</UL>

<P><STRONG><a name="[460]"></a>phpalMifare_Sw_MfcAuthenticate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, phpalmifare_sw.o(i.phpalMifare_Sw_MfcAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = phpalMifare_Sw_MfcAuthenticate &rArr; phhalHw_MfcAuthenticate &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_MfcAuthenticate
</UL>

<P><STRONG><a name="[461]"></a>phpalMifare_Sw_MfcAuthenticateKeyNo</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, phpalmifare_sw.o(i.phpalMifare_Sw_MfcAuthenticateKeyNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = phpalMifare_Sw_MfcAuthenticateKeyNo &rArr; phhalHw_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticateKeyNo &rArr; phhalHw_Rc523_MfcAuthenticate &rArr; phhalHw_Rc523_WriteFifo &rArr; phhalHw_Rc523_WriteData &rArr; phhalHw_WriteRegister &rArr; phhalHw_Rc523_WriteRegister &rArr; RC523_WriteByte &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_MfcAuthenticateKeyNo
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalMifare_MfcAuthenticateKeyNo
</UL>

<P><STRONG><a name="[388]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_common.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>

<P><STRONG><a name="[389]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_common.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>

<P><STRONG><a name="[52]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[468]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[285]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[463]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[466]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[284]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[4ba]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[4bb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[467]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
</UL>

<P><STRONG><a name="[469]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[465]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[464]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[445]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[46a]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2cd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputGPS
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[46c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[441]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[46e]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[474]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[442]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[471]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[444]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[472]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[453]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
</UL>

<P><STRONG><a name="[4bc]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[43f]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[4bd]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[44a]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[473]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[477]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[440]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_Wait
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phpalI14443p3b_Sw_Attrib
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[475]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[46d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[470]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[448]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[476]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[443]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_GetFdt
</UL>

<P><STRONG><a name="[478]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[449]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phhalHw_Rc523_SetFdt
</UL>

<P><STRONG><a name="[47a]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[cf]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d3]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2ca]"></a>OnReadComplete</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, addcard.o(i.OnReadComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = OnReadComplete &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardOK
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddCardFail
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardThread
</UL>

<P><STRONG><a name="[7f]"></a>ReadCardThread</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, addcard.o(i.ReadCardThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ReadCardThread &rArr; BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadDetach
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadCard
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> addcard.o(i.StartAddCard)
</UL>
<P><STRONG><a name="[2cb]"></a>OnReadError</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, addfp.o(i.OnReadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = OnReadError &rArr; GoPage_AddFPFail &rArr; DbgPrint &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPFail
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
</UL>

<P><STRONG><a name="[2cc]"></a>OnReadOK</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, addfp.o(i.OnReadOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = OnReadOK &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPOk
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_AddFPFail
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteFP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFPThread
</UL>

<P><STRONG><a name="[80]"></a>ReadFPThread</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, addfp.o(i.ReadFPThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = ReadFPThread &rArr; OnReadOK &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_ReadFPStep
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_RegisterFPStep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_GetFingerStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnStartReadFinger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnReadFingerOK
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadOK
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReadError
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadDetach
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> addfp.o(i.StartAddFP)
</UL>
<P><STRONG><a name="[1a7]"></a>Buzzer_LongAlternate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, alertutil.o(i.Buzzer_LongAlternate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buzzer_LongAlternate &rArr; BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_On
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnStartReadFinger
</UL>

<P><STRONG><a name="[1a4]"></a>Buzzer_ShortAlternate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, alertutil.o(i.Buzzer_ShortAlternate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buzzer_ShortAlternate &rArr; BSP_Buzzer_On
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_On
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnReadCardOK
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnReadFingerOK
</UL>

<P><STRONG><a name="[2b0]"></a>OnReadCardComplete</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, identifyproc.o(i.OnReadCardComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = OnReadCardComplete &rArr; GoPage_SenderUnlock &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_SenderUnlock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_04
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_02
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_01
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnIdentifyFailed
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByCardNO
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[2af]"></a>OnReadFPComplete</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, identifyproc.o(i.OnReadFPComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = OnReadFPComplete &rArr; GoPage_SenderUnlock &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_SenderUnlock
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_04
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_02
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02_01
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnIdentifyFailed
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetSenderInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetReceiverInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfoByFP
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyProc
</UL>

<P><STRONG><a name="[1a1]"></a>AddNumToInBuffer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, keyproc.o(i.AddNumToInBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddNumToInBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumKey
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a1]"></a>ClearInBuffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, keyproc.o(i.ClearInBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a2]"></a>DeleteInBufferLast</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, keyproc.o(i.DeleteInBufferLast))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2b2]"></a>GetKeyName</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, keyproc.o(i.GetKeyName))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>

<P><STRONG><a name="[29f]"></a>HandleInputedPassword</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, keyproc.o(i.HandleInputedPassword))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = HandleInputedPassword &rArr; GoPage_01_03_01 &rArr; SF_Unlock &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03_01
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_01
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnPasswordInputError
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_IsUnlockPassword
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_IsAdminPassword
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleKeyEvent
</UL>

<P><STRONG><a name="[2a0]"></a>HandleKeyEvent</STRONG> (Thumb, 1734 bytes, Stack size 56 bytes, keyproc.o(i.HandleKeyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = HandleKeyEvent &rArr; GoPage_01_01_02_04 &rArr; DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPOk
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteFPFail
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardOK
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_DeleteCardFail
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_06
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05_01_01
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_05
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_04
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_03
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_02
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_06
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_05
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_04
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_04
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_03
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_02
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03_01
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_03
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_02
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02_01
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_02
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_02
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01_01
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02_01
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01_02
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01_01
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateUIDBox
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdatePasswordBox
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TurnOff
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnUIDInputError
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnSetReceiverFailed
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnPasswordInputError
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateUnlockPassword
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UpdateAdminPassword
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetReceiverID
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserMinorCardNO
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserMajorCardNO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_InvalidateUserFP
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetStatus
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteFP
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddFP
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddFP
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAddCard
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAddCard
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInputedPassword
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteInBufferLast
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInBuffer
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNumToInBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
</UL>

<P><STRONG><a name="[1a2]"></a>IsNumKey</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, keyproc.o(i.IsNumKey))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddNumToInBuffer
</UL>

<P><STRONG><a name="[88]"></a>app_main</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = app_main &rArr; DevMng_Init &rArr; DevMng_GetSenderInfo &rArr; DevMng_GetGeneralUserInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UpdateStatusBar
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_On
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Sensor_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Sensor_GetStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Motor_Init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_ToggleState
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HID0_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Buzzer_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BQ34Z100_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1a8]"></a>AuthReceiver</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, messageproc.o(i.AuthReceiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = AuthReceiver &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetReceiverID
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[1b2]"></a>AuthRemove</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, messageproc.o(i.AuthRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = AuthRemove &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_UnsetSenderAndReceiver
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[1b4]"></a>AuthSender</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, messageproc.o(i.AuthSender))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = AuthSender &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetSenderID
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeneralUserInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[1fb]"></a>ClearAddrBook</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, messageproc.o(i.ClearAddrBook))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ClearAddrBook &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoPage_01
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAllUsers
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_StrError
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteAllFPs
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[1fd]"></a>ClearAdmin</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, messageproc.o(i.ClearAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = ClearAdmin &rArr; DevMng_AddLog &rArr; DevMng_GetLogEntryCount &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteAdmin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddLog
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[200]"></a>ClearGPS</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, messageproc.o(i.ClearGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ClearGPS &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteGeoLocData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[202]"></a>ClearLog</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, messageproc.o(i.ClearLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = ClearLog &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_DeleteLogData
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c8]"></a>OutputGPS</STRONG> (Thumb, 256 bytes, Stack size 168 bytes, messageproc.o(i.OutputGPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = OutputGPS &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeToString
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextGeoLoc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetGeoLocDataStream
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c9]"></a>OutputLog</STRONG> (Thumb, 220 bytes, Stack size 232 bytes, messageproc.o(i.OutputLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = OutputLog &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeToString
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetNextLogEntry
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetLogDataStream
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c3]"></a>ReadCard</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, messageproc.o(i.ReadCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = ReadCard &rArr; BSP_RFID_GetCardNO &rArr; PiccTest &rArr; ISO14443_3_ActiveABApp &rArr; phacDiscLoop_Sw_Start &rArr; phacDiscLoop_Sw_Int_ActivateA &rArr; phpalI18092mPI_Atr &rArr; phpalI18092mPI_Sw_Atr &rArr; phpalI18092mPI_Sw_Deselect &rArr; phpalI18092mPI_Sw_WriteFrameHeader &rArr; phhalHw_Exchange &rArr; phhalHw_Rc523_Exchange &rArr; phhalHw_Rc523_ExchangeReceive &rArr; phhalHw_Rc523_FieldReset &rArr; phhalHw_Rc523_Wait &rArr; phhalHw_Rc523_SetFdt &rArr; phhalHw_Rc523_GetConfig &rArr; phhalHw_ReadRegister &rArr; phhalHw_Rc523_ReadRegister &rArr; RC523_ReadByte &rArr; SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnReadCardOK
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_GetCardNO
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RFID_StrError
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c2]"></a>ReadDescription</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, messageproc.o(i.ReadDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ReadDescription &rArr; DevMng_GetDeviceInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeToString
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetDeviceInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c4]"></a>ReadFinger</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, messageproc.o(i.ReadFinger))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ReadFinger &rArr; SetResponse &rArr; SetResponseV &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_WakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Sleep
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_RegisterFPStep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_GetFingerStatus
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnStartReadFinger
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alert_OnReadFingerOK
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_StrError
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c1]"></a>ReadState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, messageproc.o(i.ReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ReadState &rArr; SetResponse &rArr; SetResponseV &rArr; BSP_HID0_Write &rArr; USBD_HID_GetReportTrigger &rArr; USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c6]"></a>WriteAddrBook</STRONG> (Thumb, 454 bytes, Stack size 72 bytes, messageproc.o(i.WriteAddrBook))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = WriteAddrBook &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateGeneralUserInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c5]"></a>WriteAdmin</STRONG> (Thumb, 250 bytes, Stack size 56 bytes, messageproc.o(i.WriteAdmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = WriteAdmin &rArr; DevMng_AddUpdateAdminInfo &rArr; FileSys_WriteBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_AddUpdateAdminInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[2c7]"></a>WriteDescription</STRONG> (Thumb, 300 bytes, Stack size 144 bytes, messageproc.o(i.WriteDescription))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = WriteDescription &rArr; DevMng_GetAdminInfo &rArr; FileSys_ReadBinary &rArr; FileSys_OpenFile &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_SetDeviceInfo
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevMng_GetAdminInfo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgPrint
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringToTime
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipNextString
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetResponse
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringValue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumber
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageProc
</UL>

<P><STRONG><a name="[26d]"></a>IsNamePart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mputil.o(i.IsNamePart))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[1b6]"></a>BQ34Z100_Read</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bq34z100.o(i.BQ34Z100_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BQ34Z100_Read &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BQ34Z100_RemainingCapacityPercent
</UL>

<P><STRONG><a name="[258]"></a>FP_CalcBCC</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fp_reader.o(i.FP_CalcBCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FP_CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_SendCommand
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_RecvResponse
</UL>

<P><STRONG><a name="[1ce]"></a>FP_GPIO_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fp_reader.o(i.FP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Init
</UL>

<P><STRONG><a name="[1c7]"></a>FP_RecvResponse</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fp_reader.o(i.FP_RecvResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FP_RecvResponse &rArr; MY_USART_Receive_DMA &rArr; pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_IsReceiveComplete
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_RegisterFPStep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_GetFingerStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteFP
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteAllFPs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Match
</UL>

<P><STRONG><a name="[1c6]"></a>FP_SendCommand</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fp_reader.o(i.FP_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FP_SendCommand &rArr; MY_USART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Transmit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_RegisterFPStep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_GetFingerStatus
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteFP
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_DeleteAllFPs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FP_Match
</UL>

<P><STRONG><a name="[2a8]"></a>Set_SCL_In</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c_soft.o(i.Set_SCL_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_SCL_In &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
</UL>

<P><STRONG><a name="[2a7]"></a>Set_SCL_Out</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, i2c_soft.o(i.Set_SCL_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Init
</UL>

<P><STRONG><a name="[241]"></a>TTY6952_Read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, keypad.o(i.TTY6952_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TTY6952_Read &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>TTY6952_Setup</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, keypad.o(i.TTY6952_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TTY6952_Setup &rArr; TTY6952_Write &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Keypad_Init
</UL>

<P><STRONG><a name="[300]"></a>TTY6952_Write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, keypad.o(i.TTY6952_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TTY6952_Write &rArr; I2C_S_SendData &rArr; Set_SCL_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Stop
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_Start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TTY6952_Setup
</UL>

<P><STRONG><a name="[2bb]"></a>pDMA_Init</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, usart_util.o(i.pDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pDMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
</UL>

<P><STRONG><a name="[2ba]"></a>pDiscard</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart_util.o(i.pDiscard))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pDiscard
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
</UL>

<P><STRONG><a name="[2b5]"></a>pGPIO_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usart_util.o(i.pGPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pGPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Init
</UL>

<P><STRONG><a name="[2b8]"></a>pGetDMAChannel_RX</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usart_util.o(i.pGetDMAChannel_RX))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_Receive_DMA
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_USART_IsReceiveComplete
</UL>

<P><STRONG><a name="[210]"></a>DelayMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rfcard_app_rc531.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFDeactive
</UL>

<P><STRONG><a name="[211]"></a>DelayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfcard_app_rc531.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[2dd]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rfcard_init.o(i.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_Identify
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_WriteByte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>

<P><STRONG><a name="[2e1]"></a>SPI_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfcard_init.o(i.SPI_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_ReceiveData &rArr; SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
</UL>

<P><STRONG><a name="[2e0]"></a>SPI_SendData</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rfcard_init.o(i.SPI_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_WriteByte
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC523_ReadByte
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
</UL>

<P><STRONG><a name="[212]"></a>DelayMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phacdiscloop_sw.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phacDiscLoop_Sw_Start
</UL>

<P><STRONG><a name="[213]"></a>DelayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, phacdiscloop_sw.o(i.DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[37a]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[92]"></a>SPI1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>SPI1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>SPI1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI1_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>SPI1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>SPI1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>SPI1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>SPI1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>SPI1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>SPI1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPIX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[2ed]"></a>SPI_Control</STRONG> (Thumb, 1072 bytes, Stack size 40 bytes, spi_stm32f10x.o(i.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[2ee]"></a>SPI_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetDataCount
</UL>

<P><STRONG><a name="[2ef]"></a>SPI_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, spi_stm32f10x.o(i.SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[2f1]"></a>SPI_Initialize</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[2f8]"></a>SPI_PeripheralReset</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPI_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[2f2]"></a>SPI_PowerControl</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[2f3]"></a>SPI_Receive</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[2f4]"></a>SPI_Send</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[2f5]"></a>SPI_Transfer</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, spi_stm32f10x.o(i.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[2f6]"></a>SPI_Uninitialize</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[99]"></a>USBD_DeviceConnect</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_DeviceConnect))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>USBD_DeviceDisconnect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_DeviceDisconnect))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>USBD_DeviceGetState</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_stm32f10x.o(i.USBD_DeviceGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DeviceGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>USBD_DeviceRemoteWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_stm32f10x.o(i.USBD_DeviceRemoteWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_DeviceRemoteWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>USBD_DeviceSetAddress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_DeviceSetAddress))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[362]"></a>USBD_EP_HW_Read</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, usbd_stm32f10x.o(i.USBD_EP_HW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EP_HW_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[328]"></a>USBD_EP_HW_Write</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, usbd_stm32f10x.o(i.USBD_EP_HW_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_EP_HW_Write &rArr; IN_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EP_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointTransfer
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>USBD_EndpointConfigure</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, usbd_stm32f10x.o(i.USBD_EndpointConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBD_EndpointConfigure &rArr; OUT_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EP_Status
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>USBD_EndpointStall</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, usbd_stm32f10x.o(i.USBD_EndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EndpointStall &rArr; OUT_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EP_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>USBD_EndpointTransfer</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, usbd_stm32f10x.o(i.USBD_EndpointTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBD_EndpointTransfer &rArr; USBD_EP_HW_Write &rArr; IN_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EP_HW_Write
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>USBD_EndpointTransferAbort</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, usbd_stm32f10x.o(i.USBD_EndpointTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_EndpointTransferAbort &rArr; OUT_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EP_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>USBD_EndpointTransferGetResult</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_EndpointTransferGetResult))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>USBD_EndpointUnconfigure</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, usbd_stm32f10x.o(i.USBD_EndpointUnconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EndpointUnconfigure &rArr; OUT_EP_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT_EP_Status
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_EP_Status
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>USBD_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>USBD_GetFrameNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_GetFrameNumber))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>USBD_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_stm32f10x.o(i.USBD_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>USBD_Initialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_Initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>USBD_PowerControl</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, usbd_stm32f10x.o(i.USBD_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_PowerControl &rArr; USBD_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>USBD_ReadSetupPacket</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_ReadSetupPacket))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[354]"></a>USBD_Reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbd_stm32f10x.o(i.USBD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_Reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerControl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>USBD_Uninitialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_stm32f10x.o(i.USBD_Uninitialize))
<BR>[Address Reference Count : 1]<UL><LI> usbd_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>EventCheckFilter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eventrecorder.o(i.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[243]"></a>EventGetTS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventGetTS
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_xch32
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[249]"></a>EventRecordItem</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__UnlockRecord
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__LockRecord
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[24b]"></a>GetContext</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eventrecorder.o(i.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetContext
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_EventRecorder_c_e8d3082c__atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>

<P><STRONG><a name="[2fb]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2fc]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[87]"></a>MC0_SPI_SignalEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.MC0_SPI_SignalEvent))
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DrvEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(i.fs_config)
</UL>
<P><STRONG><a name="[ab]"></a>mc0_DevCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_DevCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mc0_DevCtrl &rArr; mc_spi_DevCtrl &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mc0_Init &rArr; mc_spi_Init &rArr; mc_control_lock &rArr; mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_RdInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc0_RdInfo &rArr; mc_spi_ReadInfo &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_RdSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc0_RdSect &rArr; mc_spi_ReadSector &rArr; mc_read_block &rArr; mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_UnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc0_UnInit &rArr; mc_spi_UnInit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_config.o(i.mc0_WrSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc0_WrSect &rArr; mc_spi_WriteSector &rArr; mc_write_block &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fs_config.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[5b]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[5c]"></a>svcRtxKernelGetSysTimerFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetSysTimerFreq)
</UL>
<P><STRONG><a name="[5d]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[5e]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[5f]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[60]"></a>svcRtxKernelStart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[186]"></a>ThreadFlagsCheck</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[180]"></a>osRtxThreadBlock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[18a]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[18b]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[182]"></a>osRtxThreadFree</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadJoin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadDetach
</UL>

<P><STRONG><a name="[19a]"></a>osRtxThreadListUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadJoin
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadDetach
</UL>

<P><STRONG><a name="[7e]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxThreadDetach</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadDetach))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxThreadDetach &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListUnlink
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadDetach)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxThreadExit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[71]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxThreadJoin</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_thread.o(.text.svcRtxThreadJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxThreadJoin &rArr; osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListUnlink
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadJoin)
</UL>
<P><STRONG><a name="[75]"></a>svcRtxThreadNew</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[59]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[18e]"></a>TimerInsert</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[19b]"></a>TimerRemove</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
</UL>

<P><STRONG><a name="[6a]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxTimerNew</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxTimerStart</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxTimerStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStop)
</UL>
<P><STRONG><a name="[64]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[65]"></a>svcRtxMutexDelete</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[66]"></a>svcRtxMutexNew</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[67]"></a>svcRtxMutexRelease</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[7c]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[3bd]"></a>fs_component_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, fs_mapi.o(i.fs_component_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_component_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_rtos_tick_freq
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config_evr
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_cdrive
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[255]"></a>EvrFsMcSPI_CmdResponseError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_mc_spi.o(i.EvrFsMcSPI_CmdResponseError))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsMcSPI_CmdResponseError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
</UL>

<P><STRONG><a name="[3dd]"></a>mc_control_bus_speed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_control_bus_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_control_bus_speed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
</UL>

<P><STRONG><a name="[3de]"></a>mc_control_lock</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_control_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mc_control_lock &rArr; mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[3e2]"></a>mc_control_ss</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_control_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_control_ss
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_spi_control_ss
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
</UL>

<P><STRONG><a name="[3e0]"></a>mc_lock_unlock</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_lock_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mc_lock_unlock &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[3f1]"></a>mc_parse_cid</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, fs_mc_spi.o(i.mc_parse_cid))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[3f3]"></a>mc_parse_csd</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_parse_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_parse_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3e7]"></a>mc_read_block</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mc_read_block &rArr; mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_ReadSector
</UL>

<P><STRONG><a name="[3e8]"></a>mc_read_data</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[3eb]"></a>mc_read_ocr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_ocr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mc_read_ocr &rArr; mc_send_command &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3e5]"></a>mc_read_response</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_mc_spi.o(i.mc_read_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mc_read_response &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
</UL>

<P><STRONG><a name="[3e1]"></a>mc_read_status</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mc_read_status &rArr; mc_send_command &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_set_speed
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[3ea]"></a>mc_receive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
</UL>

<P><STRONG><a name="[3ec]"></a>mc_send</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick_us
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_sys_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
</UL>

<P><STRONG><a name="[3ed]"></a>mc_send_cid</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send_cid))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mc_send_cid &rArr; mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[3e4]"></a>mc_send_command</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mc_send_command &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_block_len
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_csd
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_cid
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_ocr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
</UL>

<P><STRONG><a name="[3ee]"></a>mc_send_csd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_send_csd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mc_send_csd &rArr; mc_read_data &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_data
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3df]"></a>mc_set_block_len</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_set_block_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mc_set_block_len &rArr; mc_send_command &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_lock
</UL>

<P><STRONG><a name="[3f5]"></a>mc_spi_set_speed</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_spi_set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mc_spi_set_speed &rArr; mc_read_status &rArr; mc_send_command &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_status
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_bus_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_Init
</UL>

<P><STRONG><a name="[3ef]"></a>mc_spi_update_sw_state</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_spi_update_sw_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mc_spi_update_sw_state &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_wp
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mc_read_cd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_DevCtrl
</UL>

<P><STRONG><a name="[3e9]"></a>mc_wait_busy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_mc_spi.o(i.mc_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc_wait_busy &rArr; mc_receive &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_block
</UL>

<P><STRONG><a name="[3f6]"></a>mc_write_block</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_mc_spi.o(i.mc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mc_write_block &rArr; mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_data
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_wait_busy
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send_command
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_read_response
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_control_ss
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsMcSPI_CmdResponseError
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_spi_WriteSector
</UL>

<P><STRONG><a name="[3e6]"></a>mc_write_data</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, fs_mc_spi.o(i.mc_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mc_write_data &rArr; mc_send &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_send
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_write_block
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_unlock
</UL>

<P><STRONG><a name="[308]"></a>USBD_CheckDevice</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_lib_core.o(i.USBD_CheckDevice))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Initialize
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Connect
</UL>

<P><STRONG><a name="[30a]"></a>USBD_Core</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_Core))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBD_Core &rArr; USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Reset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ResetCore
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Thread
</UL>

<P><STRONG><a name="[30e]"></a>USBD_Endpoint0</STRONG> (Thumb, 886 bytes, Stack size 32 bytes, usbd_lib_core.o(i.USBD_Endpoint0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USBD_Endpoint0 &rArr; USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_MSC_ReqToIF
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_CDC_ReqToIF
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToIF
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_ADC_ReqToEP
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_CDC_ReqToIF
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToIF
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_ADC_ReqToEP
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Setup_HID_ReqToIF
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_Out_HID_ReqToIF
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverReadSetupPacket
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverDeviceSetAddress
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketReceived
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_SetupPacketProcessed
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_OutDataReceived
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core_Endpoint0_InDataSent
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStageDone
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusOutStage
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStageDone
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StatusInStage
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataOutStage
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DataInStage
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetInterface
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetConfiguration
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqSetClrFeature
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetStatus
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetMSDescriptor
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReqGetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[334]"></a>USBD_ReqGetDescriptor</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_ReqGetDescriptor &rArr; USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetDescriptor_HID
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[33c]"></a>USBD_ReqGetMSDescriptor</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ReqGetMSDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ReqGetMSDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ReqGetExtProp_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[332]"></a>USBD_ReqGetStatus</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, usbd_lib_core.o(i.USBD_ReqGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_ReqGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[333]"></a>USBD_ReqSetClrFeature</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, usbd_lib_core.o(i.USBD_ReqSetClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBD_ReqSetClrFeature &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0_ClearFeatureStall_MSC
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[335]"></a>USBD_ReqSetConfiguration</STRONG> (Thumb, 600 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_ReqSetConfiguration &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfiguration
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[336]"></a>USBD_ReqSetInterface</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, usbd_lib_core.o(i.USBD_ReqSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBD_ReqSetInterface &rArr; USBD_EndpointStart &rArr; USBD_HID_EndpointStart &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EndpointStart
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointUnconfigure
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferAbort
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Endpoint0
</UL>

<P><STRONG><a name="[30b]"></a>USBD_ResetCore</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbd_lib_core.o(i.USBD_ResetCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ResetCore
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Core
</UL>

<P><STRONG><a name="[346]"></a>USBD_HID_CheckInstance</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbd_lib_hid.o(i.USBD_HID_CheckInstance))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Uninitialize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_SetConfiguration
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Reset
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Initialize
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EndpointStart
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetReport
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetProtocol
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreSetIdle
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetReport
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetProtocol
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CoreGetIdle
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntOut
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_EpIntIn
</UL>

<P><STRONG><a name="[349]"></a>USBD_HID_EpIntIn</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_EpIntIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_HID_EpIntIn &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SemaphoreRelease
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_GetReportTrigger
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Timer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
</UL>

<P><STRONG><a name="[34a]"></a>USBD_HID_EpIntOut</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usbd_lib_hid.o(i.USBD_HID_EpIntOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBD_HID_EpIntOut &rArr; USBD_DriverEndpointTransfer &rArr; USBD_DriverEndpointTransferAbort &rArr; USBD_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_CheckInstance
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransferGetResult
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DriverEndpointTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_HID_Thread
</UL>

<P><STRONG><a name="[170]"></a>MessageQueueGet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[179]"></a>MessageQueuePut</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[174]"></a>MessageQueueRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[7b]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[61]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[62]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[63]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[24f]"></a>EvrFsFAT_FileHandleInvalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_FileHandleInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsFAT_FileHandleInvalid &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
</UL>

<P><STRONG><a name="[250]"></a>EvrFsFAT_InvalidParameter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_InvalidParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EvrFsFAT_InvalidParameter &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_info
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[251]"></a>EvrFsFAT_NameCacheEntryInsert</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_NameCacheEntryInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_NameCacheEntryInsert &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[252]"></a>EvrFsFAT_PathName</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fs_fat.o(i.EvrFsFAT_PathName))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrFsFAT_PathName &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[253]"></a>EvrFsFAT_SectorReadFailed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_SectorReadFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[254]"></a>EvrFsFAT_SectorWriteFailed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_fat.o(i.EvrFsFAT_SectorWriteFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[380]"></a>alloc_clus</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[381]"></a>alloc_table_read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_table_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_free
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[383]"></a>alloc_table_write</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_table_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[38b]"></a>bs_read</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, fs_fat.o(i.bs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bs_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[385]"></a>cache_fat</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[3f8]"></a>char_validate</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, fs_fat.o(i.char_validate))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
</UL>

<P><STRONG><a name="[38e]"></a>clear_clus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[38f]"></a>clus_to_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[391]"></a>create_dot_entries</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, fs_fat.o(i.create_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = create_dot_entries &rArr; entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[397]"></a>create_lfn_entry</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, fs_fat.o(i.create_lfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = create_lfn_entry &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[399]"></a>create_sfn_entry</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, fs_fat.o(i.create_sfn_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = create_sfn_entry &rArr; entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_time
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_date
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[396]"></a>entry_flush</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs_fat.o(i.entry_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = entry_flush &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[3c1]"></a>entry_pos_comp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fs_fat.o(i.entry_pos_comp))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete_elink
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[398]"></a>entry_pos_inc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, fs_fat.o(i.entry_pos_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
</UL>

<P><STRONG><a name="[392]"></a>entry_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = entry_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_delete
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[3c2]"></a>entry_type</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.entry_type))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[3d5]"></a>fat_crc32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, fs_fat.o(i.fat_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
</UL>

<P><STRONG><a name="[3a3]"></a>file_locked</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_fat.o(i.file_locked))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = file_locked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[39e]"></a>find_param</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, fs_fat.o(i.find_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_param
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[395]"></a>format_date</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fs_fat.o(i.format_date))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[394]"></a>format_time</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs_fat.o(i.format_time))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
</UL>

<P><STRONG><a name="[3c0]"></a>frec_allocate</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, fs_fat.o(i.frec_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = frec_allocate &rArr; alloc_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_clus
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3a6]"></a>frec_delete</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, fs_fat.o(i.frec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = frec_delete &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3a5]"></a>frec_delete_elink</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_fat.o(i.frec_delete_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = frec_delete_elink &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_delete
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3c4]"></a>frec_find</STRONG> (Thumb, 532 bytes, Stack size 88 bytes, fs_fat.o(i.frec_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_comp
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3ca]"></a>frec_find_elink</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, fs_fat.o(i.frec_find_elink))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = frec_find_elink &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_scan
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3a2]"></a>frec_next</STRONG> (Thumb, 450 bytes, Stack size 128 bytes, fs_fat.o(i.frec_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = frec_next &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long_ent_hash
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_char_cnt
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_type
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3b0]"></a>fsinfo_read</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, fs_fat.o(i.fsinfo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fsinfo_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[39c]"></a>fsinfo_write</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fs_fat.o(i.fsinfo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fsinfo_write &rArr; write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[382]"></a>get_EOC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_pos_inc
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
</UL>

<P><STRONG><a name="[384]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>

<P><STRONG><a name="[3b2]"></a>get_root_clus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.get_root_clus))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_init
</UL>

<P><STRONG><a name="[3cd]"></a>lfn_char_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_char_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
</UL>

<P><STRONG><a name="[3b6]"></a>link_clus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_fat.o(i.link_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = link_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
</UL>

<P><STRONG><a name="[3c5]"></a>long_ent_hash</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, fs_fat.o(i.long_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3af]"></a>mbr_read</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fs_fat.o(i.mbr_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbr_read &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[3f7]"></a>name_analyse</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fs_fat.o(i.name_analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_analyse
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3f9]"></a>name_basis_gen</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, fs_fat.o(i.name_basis_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_basis_gen
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3cb]"></a>name_hash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
</UL>

<P><STRONG><a name="[3ff]"></a>name_nt_gen</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, fs_fat.o(i.name_nt_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_nt_gen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3fe]"></a>name_strip</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, fs_fat.o(i.name_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = name_strip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
</UL>

<P><STRONG><a name="[3fa]"></a>name_validate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fs_fat.o(i.name_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = name_validate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_validate
</UL>

<P><STRONG><a name="[3b4]"></a>path_create</STRONG> (Thumb, 574 bytes, Stack size 144 bytes, fs_fat.o(i.path_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_insert
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_cmd
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sn_chksum
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_nt_gen
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_hash
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_basis_gen
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_allocate
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_sfn_entry
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_lfn_entry
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_dot_entries
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_clus
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_NameCacheEntryInsert
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
</UL>

<P><STRONG><a name="[39f]"></a>path_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.path_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = path_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_root_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3a0]"></a>path_open</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, fs_fat.o(i.path_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = path_open &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elink_dir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_strip
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_analyse
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find_elink
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[39d]"></a>path_validate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_fat.o(i.path_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = path_validate &rArr; name_validate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[3b1]"></a>read_cache</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_cache &rArr; read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_mount
</UL>

<P><STRONG><a name="[38c]"></a>read_sector</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_sector &rArr; EvrFsFAT_SectorReadFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorReadFailed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbr_read
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_read
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bs_read
</UL>

<P><STRONG><a name="[3c7]"></a>sfn_extract</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fs_fat.o(i.sfn_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sfn_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_ent_hash
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3c8]"></a>short_ent_hash</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fs_fat.o(i.short_ent_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = short_ent_hash &rArr; fat_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfn_extract
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3c6]"></a>sn_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.sn_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;path_create
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_next
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frec_find
</UL>

<P><STRONG><a name="[3a4]"></a>unlink_clus</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fs_fat.o(i.unlink_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = unlink_clus &rArr; alloc_table_write &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_write
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_table_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_open
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[390]"></a>write_cache</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_cache &rArr; write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rmdir
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_write
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[39a]"></a>write_sector</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_sector &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsj_write
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFsFAT_SectorWriteFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entry_flush
</UL>

<P><STRONG><a name="[126]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __sys_open &rArr; fat_open &rArr; path_create &rArr; frec_find &rArr; entry_pos_inc &rArr; alloc_table_read &rArr; cache_fat &rArr; EvrFsFAT_SectorWriteFailed &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[479]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[46f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[133]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[137]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[56]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
